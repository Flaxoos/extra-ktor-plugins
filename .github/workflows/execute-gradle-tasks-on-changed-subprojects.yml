name: Execute gradle tasks on changed subprojects
on:
  workflow_call:
    inputs:
      sub_projects_tasks:
        required: true
        type: string
      parent_project_task:
        required: false
        type: string
      gradle_output_handler_path:
        required: false
        type: string
      gradle_output_handler_name:
        required: false
        type: string

jobs:
  build:
    name: Execute gradle tasks on changed subprojects
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        if: ${{ !github.event.act }} # skip during local actions testing
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Detect modified subprojects
        id: detect_changes
        run: |
          # Get the list of modified directories under "ktor-plugins" and "buildSrc"
          git fetch
          changed_dirs=$(git diff --name-only origin/main..$GITHUB_SHA)
          if echo "$changed_dirs" | grep -q '^buildSrc/' && ! echo "$changed_dirs" | grep -q '^ktor-'; then
            echo "only buildSrc has changed"
            changed_dirs="buildSrc"
          else
            changed_dirs=$(echo "$changed_dirs" | grep -E '^ktor-(server|client)-' | cut -d/ -f1 | sort -u | tr '\n' ' ')
          fi
          echo "Changed subprojects: $changed_dirs"
          echo "::set-output name=changed_subprojects::$changed_dirs"

      - name: Run ${{ inputs.sub_projects_tasks }} on ${{ steps.detect_changes.outputs.changed_subprojects }}
        id: run_gradle_tasks
        run: |
          tasks="${{ inputs.sub_projects_tasks }}"
          projects="${{ steps.detect_changes.outputs.changed_subprojects }}"
          parent_project_task="${{ inputs.parent_project_task }}"
          
          echo "Projects: $projects"
          echo "Tasks: $tasks"
          echo "parent_project_task: $parent_project_task"
          
          IFS=' ' read -ra proj_arr <<< "$projects"
          IFS=' ' read -ra task_arr <<< "$tasks"
          
          command=""
          for proj in "${proj_arr[@]}"; do
              for task in "${task_arr[@]}"; do
              command+=":$proj:$task "
            done
          done
          
          if [[ $projects == "buildSrc" ]]; then
            echo "only buildSrc has changed, setting command to tasks"
            command="$tasks "
          fi
          
          command+="$parent_project_task "
        
          gradle_command="./gradlew --stacktrace --no-daemon $command"
          echo "Executing: $gradle_command"
          GRADLE_OUTPUT=$($gradle_command)
          echo "::set-output name=gradle_output::GRADLE_OUTPUT"

      - name: Handle Gradle Output
        if: ${{ inputs.gradle_output_handler_path }}
        env:
          GRADLE_OUTPUT: ${{ steps.run_gradle_tasks.outputs.gradle_output }}
        run: |
          ROOT_COVERAGE=$(${{ inputs.gradle_output_handler_path }})
          echo "::set-output name=root_coverage::$ROOT_COVERAGE"