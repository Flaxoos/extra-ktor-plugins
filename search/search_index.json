{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Extra Ktor Plugins","text":""},{"location":"#feature-rich-efficient-and-highly-customizable-plugins-for-your-multiplatform-ktor-server-or-client","title":"Feature-rich, efficient, and highly customizable plugins for your Multiplatform Ktor Server or Client","text":""},{"location":"#server-plugins","title":"Server Plugins","text":"Plugin Supported Platforms Description Kafka JVM Sets up a Kafka client admin, producer, and consumer using a dedicated DSL. Allows consumption logic definition during the installation phase. Task Scheduling JVM / Native^ Task scheduling for distributed servers with various and extendable task management strategies Rate Limiting JVM / Native Highly configurable rate limiter with offering different startegies, request weighting, blacklisting and whitelisting of requests based on authentication, host and user agents"},{"location":"#client-plugins","title":"Client Plugins","text":"Plugin Supported Platforms Description Circuit Breaker JVM / Native / JS Enhances system resilience by halting requests to failing services once a defined error threshold is reached. Automatically switches between open and closed states based on the health of the targeted service. <p>Note that <code>^</code> means issues with native binary dependencies, feel free to pull the project and publish locally</p>"},{"location":"#examples","title":"Examples","text":"<p>See Examples Projects</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are always welcome! If you have an idea for a plugin or want to improve an existing one, feel free to fork this repository and submit a pull request.</p>"},{"location":"about/Motivation/","title":"Motivation","text":"<p>While Kotlin is seeing widespread adoption, its web framework, Ktor, is sometimes overlooked, largely because Spring Boot still offers an exhaustive range of starters. To bridge this gap, we kotlin fans could contribute to enhancing Ktor's functionality, which will increase adoption and further stimulate contribution by others. </p>"},{"location":"dokka/","title":"extra-ktor-plugins","text":"<p>//extra-ktor-plugins</p>"},{"location":"dokka/#extra-ktor-plugins","title":"extra-ktor-plugins","text":""},{"location":"dokka/#packages","title":"Packages","text":"Name io.github.flaxoos.ktor.client.plugins.circuitbreaker io.github.flaxoos.ktor.server.plugins.kafka io.github.flaxoos.ktor.server.plugins.kafka.components io.github.flaxoos.ktor.server.plugins.ratelimiter io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations io.github.flaxoos.ktor.server.plugins.taskscheduling io.github.flaxoos.ktor.server.plugins.taskscheduling.managers io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/","title":"io.github.flaxoos.ktor.client.plugins.circuitbreaker","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/#types","title":"Types","text":"Name Summary CircuitBreakerConfig [common]class CircuitBreakerConfigConfiguration for CircuitBreaker. CircuitBreakerDsl [common]@DslMarkerannotation class CircuitBreakerDsl CircuitBreakerException [common]class CircuitBreakerException(failureThreshold: Int) : Exception CircuitBreakerName [common]@JvmInlinevalue class CircuitBreakerName(val value: String)Value class for a CircuitBreaker name"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/#properties","title":"Properties","text":"Name Summary CircuitBreaking [common]val CircuitBreaking: ClientPlugin&lt;CircuitBreakerConfig&gt;"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/#functions","title":"Functions","text":"Name Summary global [common]fun CircuitBreakerConfig.global(config: CircuitBreakerConfig.CircuitBreakerBuilder.() -&gt; Unit)Registers a global CircuitBreaker that is applied to the whole client register [common]fun CircuitBreakerConfig.register(name: CircuitBreakerName, config: CircuitBreakerConfig.CircuitBreakerBuilder.() -&gt; Unit)Register a CircuitBreaker with a given name requestWithCircuitBreaker [common]suspend fun HttpClient.requestWithCircuitBreaker(name: CircuitBreakerName = CIRCUIT_BREAKER_NAME_GLOBAL, block: HttpRequestBuilder.() -&gt; Unit): HttpResponseMake a request with the CircuitBreaker with the given CircuitBreakerName withCircuitBreaker [common]fun HttpRequestBuilder.withCircuitBreaker(name: CircuitBreakerName = CIRCUIT_BREAKER_NAME_GLOBAL)Apply the CircuitBreaker with the given CircuitBreakerName to the request or the global one if name is given"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaking/","title":"CircuitBreaking","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreaking</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaking/#circuitbreaking","title":"CircuitBreaking","text":"<p>[common]\\ val CircuitBreaking: ClientPlugin&lt;CircuitBreakerConfig &gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/global/","title":"global","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/global</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/global/#global","title":"global","text":"<p>[common]\\ fun CircuitBreakerConfig.global( config: CircuitBreakerConfig.CircuitBreakerBuilder.() -&gt; Unit)</p> <p>Registers a global CircuitBreaker that is applied to the whole client</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/register/","title":"register","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/register</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/register/#register","title":"register","text":"<p>[common]\\ fun CircuitBreakerConfig.register( name: CircuitBreakerName, config: CircuitBreakerConfig.CircuitBreakerBuilder.() -&gt; Unit)</p> <p>Register a CircuitBreaker with a given name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/request-with-circuit-breaker/","title":"requestWithCircuitBreaker","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/requestWithCircuitBreaker</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/request-with-circuit-breaker/#requestwithcircuitbreaker","title":"requestWithCircuitBreaker","text":"<p>[common]\\ suspend fun HttpClient.requestWithCircuitBreaker( name: CircuitBreakerName = CIRCUIT_BREAKER_NAME_GLOBAL, block: HttpRequestBuilder.() -&gt; Unit): HttpResponse</p> <p>Make a request with the CircuitBreaker with the given CircuitBreakerName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/with-circuit-breaker/","title":"withCircuitBreaker","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/withCircuitBreaker</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/with-circuit-breaker/#withcircuitbreaker","title":"withCircuitBreaker","text":"<p>[common]\\ fun HttpRequestBuilder.withCircuitBreaker( name: CircuitBreakerName = CIRCUIT_BREAKER_NAME_GLOBAL)</p> <p>Apply the CircuitBreaker with the given CircuitBreakerName to the request or the global one if name is given</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/","title":"CircuitBreakerConfig","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/#circuitbreakerconfig","title":"CircuitBreakerConfig","text":"<p>[common]\\ class CircuitBreakerConfig</p> <p>Configuration for CircuitBreaker.</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/#constructors","title":"Constructors","text":"CircuitBreakerConfig [common]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/#types","title":"Types","text":"Name Summary CircuitBreakerBuilder [common]class CircuitBreakerBuilder"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/#functions","title":"Functions","text":"Name Summary global [common]fun CircuitBreakerConfig.global(config: CircuitBreakerConfig.CircuitBreakerBuilder.() -&gt; Unit)Registers a global CircuitBreaker that is applied to the whole client register [common]fun CircuitBreakerConfig.register(name: CircuitBreakerName, config: CircuitBreakerConfig.CircuitBreakerBuilder.() -&gt; Unit)Register a CircuitBreaker with a given name"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-config/","title":"CircuitBreakerConfig","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerConfig/CircuitBreakerConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-config/#circuitbreakerconfig","title":"CircuitBreakerConfig","text":"<p>[common]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-builder/","title":"CircuitBreakerBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerConfig/CircuitBreakerBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-builder/#circuitbreakerbuilder","title":"CircuitBreakerBuilder","text":"<p>[common]\\ class CircuitBreakerBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-builder/#constructors","title":"Constructors","text":"CircuitBreakerBuilder [common]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-builder/#properties","title":"Properties","text":"Name Summary failureThreshold [common]var failureThreshold: IntHow many failures are to be tolerated before the circuit moves to HALF_OPEN. failureTrigger [common]var failureTrigger: HttpResponse.() -&gt; BooleanWhat is considered a failure. default is HttpResponse.status&gt;= 300 halfOpenFailureThreshold [common]var halfOpenFailureThreshold: IntHow many attempts are allowed in HALF_OPEN state. resetInterval [common]var resetInterval: DurationHow long to wait before moving from OPEN to HALF_OPEN."},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-builder/-circuit-breaker-builder/","title":"CircuitBreakerBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerConfig/CircuitBreakerBuilder/CircuitBreakerBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-builder/-circuit-breaker-builder/#circuitbreakerbuilder","title":"CircuitBreakerBuilder","text":"<p>[common]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-builder/failure-threshold/","title":"failureThreshold","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerConfig/CircuitBreakerBuilder/failureThreshold</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-builder/failure-threshold/#failurethreshold","title":"failureThreshold","text":"<p>[common]\\ var failureThreshold: Int</p> <p>How many failures are to be tolerated before the circuit moves to HALF_OPEN.</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-builder/failure-trigger/","title":"failureTrigger","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerConfig/CircuitBreakerBuilder/failureTrigger</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-builder/failure-trigger/#failuretrigger","title":"failureTrigger","text":"<p>[common]\\ var failureTrigger: HttpResponse.() -&gt; Boolean</p> <p>What is considered a failure. default is HttpResponse.status&gt;= 300</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-builder/half-open-failure-threshold/","title":"halfOpenFailureThreshold","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerConfig/CircuitBreakerBuilder/halfOpenFailureThreshold</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-builder/half-open-failure-threshold/#halfopenfailurethreshold","title":"halfOpenFailureThreshold","text":"<p>[common]\\ var halfOpenFailureThreshold: Int</p> <p>How many attempts are allowed in HALF_OPEN state.</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-builder/reset-interval/","title":"resetInterval","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerConfig/CircuitBreakerBuilder/resetInterval</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-config/-circuit-breaker-builder/reset-interval/#resetinterval","title":"resetInterval","text":"<p>[common]\\ var resetInterval: Duration</p> <p>How long to wait before moving from OPEN to HALF_OPEN.</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-dsl/","title":"CircuitBreakerDsl","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerDsl</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-dsl/#circuitbreakerdsl","title":"CircuitBreakerDsl","text":"<p>[common]\\ @DslMarker</p> <p>annotation class CircuitBreakerDsl</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-exception/","title":"CircuitBreakerException","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerException</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-exception/#circuitbreakerexception","title":"CircuitBreakerException","text":"<p>[common]\\ class CircuitBreakerException( failureThreshold: Int) : Exception</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-exception/#constructors","title":"Constructors","text":"CircuitBreakerException [common]constructor(failureThreshold: Int)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-exception/#properties","title":"Properties","text":"Name Summary cause [common]open val cause: Throwable? message [common]open val message: String?"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-exception/-circuit-breaker-exception/","title":"CircuitBreakerException","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerException/CircuitBreakerException</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-exception/-circuit-breaker-exception/#circuitbreakerexception","title":"CircuitBreakerException","text":"<p>[common]\\ constructor(failureThreshold: Int)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-name/","title":"CircuitBreakerName","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-name/#circuitbreakername","title":"CircuitBreakerName","text":"<p>[common]\\ @JvmInline</p> <p>value class CircuitBreakerName(val value: String)</p> <p>Value class for a CircuitBreaker name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-name/#constructors","title":"Constructors","text":"CircuitBreakerName [common]constructor(value: String)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-name/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-name/#properties","title":"Properties","text":"Name Summary value [common]val value: String"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-name/-circuit-breaker-name/","title":"CircuitBreakerName","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerName/CircuitBreakerName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-name/-circuit-breaker-name/#circuitbreakername","title":"CircuitBreakerName","text":"<p>[common]\\ constructor(value: String)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-name/value/","title":"value","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerName/value</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-name/value/#value","title":"value","text":"<p>[common]\\ val value: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-name/-companion/","title":"Companion","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerName/Companion</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-name/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-name/-companion/#functions","title":"Functions","text":"Name Summary toCircuitBreakerName [common]fun String.toCircuitBreakerName(): CircuitBreakerName"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-name/-companion/to-circuit-breaker-name/","title":"toCircuitBreakerName","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/CircuitBreakerName/Companion/toCircuitBreakerName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.client.plugins.circuitbreaker/-circuit-breaker-name/-companion/to-circuit-breaker-name/#tocircuitbreakername","title":"toCircuitBreakerName","text":"<p>[common]\\ fun String.toCircuitBreakerName(): CircuitBreakerName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/","title":"io.github.flaxoos.ktor.server.plugins.kafka","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/#types","title":"Types","text":"Name Summary AbstractKafkaConfig [jvm]sealed class AbstractKafkaConfig AdminPropertiesBuilder [jvm]class AdminPropertiesBuilder : ClientPropertiesBuilder Attributes [jvm]object Attributes ClientPropertiesBuilder [jvm]sealed class ClientPropertiesBuilder : KafkaPropertiesBuildersee CommonClientConfigs CommonClientPropertiesBuilder [jvm]data object CommonClientPropertiesBuilder : ClientPropertiesBuilderConcrete implementation of ClientPropertiesBuilder to represent the common properties CompressionType [jvm]typealias CompressionType = org.apache.kafka.common.record.CompressionType Consumer [jvm]typealias Consumer = KafkaConsumer&lt;KafkaRecordKey, GenericRecord&gt; ConsumerPropertiesBuilder [jvm]class ConsumerPropertiesBuilder(var schemaRegistryUrl: String? = null) : ClientPropertiesBuilder, SchemaRegistryProvidersee ConsumerConfig ConsumerRecordHandler [jvm]typealias ConsumerRecordHandler = suspend Application.(ConsumerRecord&lt;KafkaRecordKey, GenericRecord&gt;) -&gt; Unit Defaults [jvm]object Defaults FileConfig [jvm]object FileConfig KafkaConfig [jvm]class KafkaConfig : AbstractKafkaConfig KafkaConsumerConfig [jvm]class KafkaConsumerConfig KafkaDsl [jvm]@DslMarkerannotation class KafkaDsl KafkaFileConfig [jvm]class KafkaFileConfig(config: ApplicationConfig) : AbstractKafkaConfigConfiguration for the Kafka plugin KafkaProperties [jvm]typealias KafkaProperties = MutableMap&lt;String, Any?&gt; KafkaPropertiesBuilder [jvm]interface KafkaPropertiesBuilderKafkaDsl Builder for KafkaProperties KafkaRecordKey [jvm]typealias KafkaRecordKey = String MessageTimestampType [jvm]enum MessageTimestampType : Enum&lt;MessageTimestampType&gt; Producer [jvm]typealias Producer = KafkaProducer&lt;KafkaRecordKey, GenericRecord&gt; ProducerPropertiesBuilder [jvm]class ProducerPropertiesBuilder(var schemaRegistryUrl: String? = null) : ClientPropertiesBuilder, SchemaRegistryProvidersee ProducerConfig SchemaRegistrationBuilder [jvm]class SchemaRegistrationBuilder TopicBuilder [jvm]class TopicBuilder(name: TopicName) TopicName [jvm]@JvmInlinevalue class TopicName(val value: String) TopicPropertiesBuilder [jvm]class TopicPropertiesBuilder : KafkaPropertiesBuilderSee TopicConfig"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/#properties","title":"Properties","text":"Name Summary Kafka [jvm]val Kafka: ApplicationPlugin&lt;KafkaConfig&gt;Plugin for setting up a kafka client kafkaAdminClient [jvm]val Application.kafkaAdminClient: AdminClient?The kafka admin client created by the Kafka plugin kafkaConsumer [jvm]val Application.kafkaConsumer: KafkaConsumer&lt;KafkaRecordKey, GenericRecord&gt;?The kafka consumer created by the Kafka plugin kafkaConsumerJob [jvm]val Application.kafkaConsumerJob: Job?The kafka consumer job created by the Kafka plugin kafkaProducer [jvm]val Application.kafkaProducer: KafkaProducer&lt;KafkaRecordKey, GenericRecord&gt;?The kafka producer created by the Kafka plugin schemaRegistryClient [jvm]val Application.schemaRegistryClient: SchemaRegistryClient?The schema registry client created by the Kafka plugin if the schema registry url is set and schemas to register are set"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/#functions","title":"Functions","text":"Name Summary admin [jvm]fun KafkaConfig.admin(configuration: AdminPropertiesBuilder.() -&gt; Unit = { AdminPropertiesBuilder() }) common [jvm]fun KafkaConfig.common(configuration: CommonClientPropertiesBuilder.() -&gt; Unit = { CommonClientPropertiesBuilder }) consumer [jvm]fun KafkaConfig.consumer(configuration: ConsumerPropertiesBuilder.() -&gt; Unit = { ConsumerPropertiesBuilder(schemaRegistryUrl) }) consumerConfig [jvm]fun AbstractKafkaConfig.consumerConfig(configuration: KafkaConsumerConfig.() -&gt; Unit = { }) consumerRecordHandler [jvm]fun KafkaConsumerConfig.consumerRecordHandler(topicName: TopicName, handler: ConsumerRecordHandler) installKafka [jvm]fun Application.installKafka(config: KafkaConfig.() -&gt; Unit)Installs the Kafka plugin with the given KafkaConfig block producer [jvm]fun KafkaConfig.producer(configuration: ProducerPropertiesBuilder.() -&gt; Unit = { ProducerPropertiesBuilder(schemaRegistryUrl) }) registerSchemas [jvm]fun AbstractKafkaConfig.registerSchemas(configuration: SchemaRegistrationBuilder.() -&gt; Unit = { SchemaRegistrationBuilder() }) topic [jvm]fun KafkaConfig.topic(name: TopicName, block: TopicBuilder.() -&gt; Unit)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka/","title":"Kafka","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Kafka</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka/#kafka","title":"Kafka","text":"<p>[jvm]\\ val Kafka: ApplicationPlugin&lt;KafkaConfig&gt;</p> <p>Plugin for setting up a kafka client</p> <p>Example:</p> <pre><code>install(Kafka) {\n     schemaRegistryUrl = listOf(super.schemaRegistryUrl)\n     topic(it) {\n         partitions = 1\n         replicas = 1\n         configs {\n             messageTimestampType = CreateTime\n         }\n     }\n     common { bootstrapServers = listOf(\"my-kafka\") }\n     admin { } // will create an admin\n     producer { clientId = \"my-client-id\" } // will create a producer\n     consumer { groupId = \"my-group-id\" } // will create a consumer\n     consumerConfig {\n         consumerRecordHandler(\"my-topic) { record -&gt;\n             myService.save(record)\n         )\n    }\n}\n</code></pre>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/admin/","title":"admin","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/admin</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/admin/#admin","title":"admin","text":"<p>[jvm]\\ fun KafkaConfig.admin( configuration: AdminPropertiesBuilder.() -&gt; Unit = { AdminPropertiesBuilder() })</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/common/","title":"common","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/common</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/common/#common","title":"common","text":"<p>[jvm]\\ fun KafkaConfig.common( configuration: CommonClientPropertiesBuilder.() -&gt; Unit = { CommonClientPropertiesBuilder })</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/consumer-config/","title":"consumerConfig","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/consumerConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/consumer-config/#consumerconfig","title":"consumerConfig","text":"<p>[jvm]\\ fun AbstractKafkaConfig.consumerConfig( configuration: KafkaConsumerConfig.() -&gt; Unit = { })</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/consumer-record-handler/","title":"consumerRecordHandler","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/consumerRecordHandler</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/consumer-record-handler/#consumerrecordhandler","title":"consumerRecordHandler","text":"<p>[jvm]\\ fun KafkaConsumerConfig.consumerRecordHandler( topicName: TopicName, handler: ConsumerRecordHandler)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/consumer/","title":"consumer","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/consumer</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/consumer/#consumer","title":"consumer","text":"<p>[jvm]\\ fun KafkaConfig.consumer( configuration: ConsumerPropertiesBuilder.() -&gt; Unit = { ConsumerPropertiesBuilder( schemaRegistryUrl) })</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/install-kafka/","title":"installKafka","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/installKafka</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/install-kafka/#installkafka","title":"installKafka","text":"<p>[jvm]\\ fun Application.installKafka(config: KafkaConfig.() -&gt; Unit)</p> <p>Installs the Kafka plugin with the given KafkaConfig block</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/kafka-admin-client/","title":"kafkaAdminClient","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/kafkaAdminClient</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/kafka-admin-client/#kafkaadminclient","title":"kafkaAdminClient","text":"<p>[jvm]\\ val Application.kafkaAdminClient: AdminClient?</p> <p>The kafka admin client created by the Kafka plugin</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/kafka-consumer-job/","title":"kafkaConsumerJob","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/kafkaConsumerJob</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/kafka-consumer-job/#kafkaconsumerjob","title":"kafkaConsumerJob","text":"<p>[jvm]\\ val Application.kafkaConsumerJob: Job?</p> <p>The kafka consumer job created by the Kafka plugin</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/kafka-consumer/","title":"kafkaConsumer","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/kafkaConsumer</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/kafka-consumer/#kafkaconsumer","title":"kafkaConsumer","text":"<p>[jvm]\\ val Application.kafkaConsumer: KafkaConsumer&lt;KafkaRecordKey, GenericRecord&gt;?</p> <p>The kafka consumer created by the Kafka plugin</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/kafka-producer/","title":"kafkaProducer","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/kafkaProducer</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/kafka-producer/#kafkaproducer","title":"kafkaProducer","text":"<p>[jvm]\\ val Application.kafkaProducer: KafkaProducer&lt;KafkaRecordKey, GenericRecord&gt;?</p> <p>The kafka producer created by the Kafka plugin</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/producer/","title":"producer","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/producer</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/producer/#producer","title":"producer","text":"<p>[jvm]\\ fun KafkaConfig.producer( configuration: ProducerPropertiesBuilder.() -&gt; Unit = { ProducerPropertiesBuilder( schemaRegistryUrl) })</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/register-schemas/","title":"registerSchemas","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/registerSchemas</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/register-schemas/#registerschemas","title":"registerSchemas","text":"<p>[jvm]\\ fun AbstractKafkaConfig.registerSchemas( configuration: SchemaRegistrationBuilder.() -&gt; Unit = { SchemaRegistrationBuilder() })</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/schema-registry-client/","title":"schemaRegistryClient","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/schemaRegistryClient</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/schema-registry-client/#schemaregistryclient","title":"schemaRegistryClient","text":"<p>[jvm]\\ val Application.schemaRegistryClient: SchemaRegistryClient?</p> <p>The schema registry client created by the Kafka plugin if the schema registry url is set and schemas to register are set</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/topic/","title":"topic","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/topic</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/topic/#topic","title":"topic","text":"<p>[jvm]\\ fun KafkaConfig.topic(name: TopicName, block: TopicBuilder.() -&gt; Unit)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-abstract-kafka-config/","title":"AbstractKafkaConfig","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/AbstractKafkaConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-abstract-kafka-config/#abstractkafkaconfig","title":"AbstractKafkaConfig","text":"<p>sealed class AbstractKafkaConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-abstract-kafka-config/#inheritors","title":"Inheritors","text":"KafkaConfig KafkaFileConfig"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-abstract-kafka-config/#properties","title":"Properties","text":"Name Summary consumerConfig [jvm]var consumerConfig: KafkaConsumerConfig?Because the consumer is operating in the background, it can be defined in the setup phase schemaRegistrationTimeoutMs [jvm]var schemaRegistrationTimeoutMs: LongSchema registration timeout schemaRegistryUrl [jvm]abstract val schemaRegistryUrl: String?The schema registry url, if set, a client will be created and can be accessed later to register schemas manually, if schemas is left empty"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-abstract-kafka-config/#functions","title":"Functions","text":"Name Summary consumerConfig [jvm]fun AbstractKafkaConfig.consumerConfig(configuration: KafkaConsumerConfig.() -&gt; Unit = { }) registerSchemas [jvm]fun AbstractKafkaConfig.registerSchemas(configuration: SchemaRegistrationBuilder.() -&gt; Unit = { SchemaRegistrationBuilder() })"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-abstract-kafka-config/consumer-config/","title":"consumerConfig","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/AbstractKafkaConfig/consumerConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-abstract-kafka-config/consumer-config/#consumerconfig","title":"consumerConfig","text":"<p>[jvm]\\ var consumerConfig: KafkaConsumerConfig?</p> <p>Because the consumer is operating in the background, it can be defined in the setup phase</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-abstract-kafka-config/schema-registration-timeout-ms/","title":"schemaRegistrationTimeoutMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/AbstractKafkaConfig/schemaRegistrationTimeoutMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-abstract-kafka-config/schema-registration-timeout-ms/#schemaregistrationtimeoutms","title":"schemaRegistrationTimeoutMs","text":"<p>[jvm]\\ var schemaRegistrationTimeoutMs: Long</p> <p>Schema registration timeout</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-abstract-kafka-config/schema-registry-url/","title":"schemaRegistryUrl","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/AbstractKafkaConfig/schemaRegistryUrl</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-abstract-kafka-config/schema-registry-url/#schemaregistryurl","title":"schemaRegistryUrl","text":"<p>[jvm]\\ abstract val schemaRegistryUrl: String?</p> <p>The schema registry url, if set, a client will be created and can be accessed later to register schemas manually, if schemas is left empty</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-admin-properties-builder/","title":"AdminPropertiesBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/AdminPropertiesBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-admin-properties-builder/#adminpropertiesbuilder","title":"AdminPropertiesBuilder","text":"<p>[jvm]\\ class AdminPropertiesBuilder : ClientPropertiesBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-admin-properties-builder/#constructors","title":"Constructors","text":"AdminPropertiesBuilder [jvm]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-admin-properties-builder/#properties","title":"Properties","text":"Name Summary bootstrapServers [jvm]var bootstrapServers: Any? clientDnsLookup [jvm]var clientDnsLookup: Any? clientId [jvm]var clientId: Any? clientRack [jvm]var clientRack: Any? connectionsMaxIdleMs [jvm]var connectionsMaxIdleMs: Any? metadataMaxAge [jvm]var metadataMaxAge: Any? metricReporterClasses [jvm]var metricReporterClasses: Any? metricsNumSamples [jvm]var metricsNumSamples: Any? metricsRecordingLevel [jvm]var metricsRecordingLevel: Any? metricsSampleWindowMs [jvm]var metricsSampleWindowMs: Any? receiveBuffer [jvm]var receiveBuffer: Any? reconnectBackoffMaxMs [jvm]var reconnectBackoffMaxMs: Any? reconnectBackoffMs [jvm]var reconnectBackoffMs: Any? requestTimeoutMs [jvm]var requestTimeoutMs: Any? retries [jvm]var retries: Any? retryBackoffMs [jvm]var retryBackoffMs: Any? securityProtocol [jvm]var securityProtocol: Any? sendBuffer [jvm]var sendBuffer: Any?"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-admin-properties-builder/#functions","title":"Functions","text":"Name Summary build [jvm]open override fun build(): MutableMap&lt;String, Any?&gt;"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-admin-properties-builder/-admin-properties-builder/","title":"AdminPropertiesBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/AdminPropertiesBuilder/AdminPropertiesBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-admin-properties-builder/-admin-properties-builder/#adminpropertiesbuilder","title":"AdminPropertiesBuilder","text":"<p>[jvm]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-attributes/","title":"Attributes","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Attributes</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-attributes/#attributes","title":"Attributes","text":"<p>[jvm]\\ object Attributes</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-attributes/#properties","title":"Properties","text":"Name Summary AdminClientAttributeKey [jvm]val AdminClientAttributeKey: AttributeKey&lt;AdminClient&gt;Attribute key for AdminClient ConsumerAttributeKey [jvm]val ConsumerAttributeKey: AttributeKey&lt;KafkaConsumer&lt;KafkaRecordKey, GenericRecord&gt;&gt;Attribute key for Consumer ProducerAttributeKey [jvm]val ProducerAttributeKey: AttributeKey&lt;KafkaProducer&lt;KafkaRecordKey, GenericRecord&gt;&gt;Attribute key for Producer SchemaRegistryClientKey [jvm]val SchemaRegistryClientKey: AttributeKey&lt;SchemaRegistryClient&gt;Attribute key for HttpClient used for registering Schemas to the configured schema registry"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-attributes/-admin-client-attribute-key/","title":"AdminClientAttributeKey","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Attributes/AdminClientAttributeKey</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-attributes/-admin-client-attribute-key/#adminclientattributekey","title":"AdminClientAttributeKey","text":"<p>[jvm]\\ val AdminClientAttributeKey: AttributeKey&lt;AdminClient&gt;</p> <p>Attribute key for AdminClient</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-attributes/-consumer-attribute-key/","title":"ConsumerAttributeKey","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Attributes/ConsumerAttributeKey</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-attributes/-consumer-attribute-key/#consumerattributekey","title":"ConsumerAttributeKey","text":"<p>[jvm]\\ val ConsumerAttributeKey: AttributeKey&lt;KafkaConsumer&lt;KafkaRecordKey, GenericRecord&gt;&gt;</p> <p>Attribute key for Consumer</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-attributes/-producer-attribute-key/","title":"ProducerAttributeKey","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Attributes/ProducerAttributeKey</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-attributes/-producer-attribute-key/#producerattributekey","title":"ProducerAttributeKey","text":"<p>[jvm]\\ val ProducerAttributeKey: AttributeKey&lt;KafkaProducer&lt;KafkaRecordKey, GenericRecord&gt;&gt;</p> <p>Attribute key for Producer</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-attributes/-schema-registry-client-key/","title":"SchemaRegistryClientKey","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Attributes/SchemaRegistryClientKey</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-attributes/-schema-registry-client-key/#schemaregistryclientkey","title":"SchemaRegistryClientKey","text":"<p>[jvm]\\ val SchemaRegistryClientKey: AttributeKey&lt;SchemaRegistryClient &gt;</p> <p>Attribute key for HttpClient used for registering Schemas to the configured schema registry</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/","title":"ClientPropertiesBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/#clientpropertiesbuilder","title":"ClientPropertiesBuilder","text":"<p>sealed class ClientPropertiesBuilder : KafkaPropertiesBuilder</p> <p>see CommonClientConfigs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/#inheritors","title":"Inheritors","text":"CommonClientPropertiesBuilder AdminPropertiesBuilder ProducerPropertiesBuilder ConsumerPropertiesBuilder"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/#properties","title":"Properties","text":"Name Summary bootstrapServers [jvm]var bootstrapServers: Any? clientDnsLookup [jvm]var clientDnsLookup: Any? clientId [jvm]var clientId: Any? clientRack [jvm]var clientRack: Any? connectionsMaxIdleMs [jvm]var connectionsMaxIdleMs: Any? metadataMaxAge [jvm]var metadataMaxAge: Any? metricReporterClasses [jvm]var metricReporterClasses: Any? metricsNumSamples [jvm]var metricsNumSamples: Any? metricsRecordingLevel [jvm]var metricsRecordingLevel: Any? metricsSampleWindowMs [jvm]var metricsSampleWindowMs: Any? receiveBuffer [jvm]var receiveBuffer: Any? reconnectBackoffMaxMs [jvm]var reconnectBackoffMaxMs: Any? reconnectBackoffMs [jvm]var reconnectBackoffMs: Any? requestTimeoutMs [jvm]var requestTimeoutMs: Any? retries [jvm]var retries: Any? retryBackoffMs [jvm]var retryBackoffMs: Any? securityProtocol [jvm]var securityProtocol: Any? sendBuffer [jvm]var sendBuffer: Any?"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/#functions","title":"Functions","text":"Name Summary build [jvm]open override fun build(): MutableMap&lt;String, Any?&gt;"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/bootstrap-servers/","title":"bootstrapServers","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/bootstrapServers</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/bootstrap-servers/#bootstrapservers","title":"bootstrapServers","text":"<p>[jvm]\\ var bootstrapServers: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/build/","title":"build","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/build</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/build/#build","title":"build","text":"<p>[jvm]\\ open override fun build(): MutableMap &lt;String, Any ?&gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/client-dns-lookup/","title":"clientDnsLookup","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/clientDnsLookup</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/client-dns-lookup/#clientdnslookup","title":"clientDnsLookup","text":"<p>[jvm]\\ var clientDnsLookup: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/client-id/","title":"clientId","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/clientId</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/client-id/#clientid","title":"clientId","text":"<p>[jvm]\\ var clientId: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/client-rack/","title":"clientRack","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/clientRack</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/client-rack/#clientrack","title":"clientRack","text":"<p>[jvm]\\ var clientRack: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/connections-max-idle-ms/","title":"connectionsMaxIdleMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/connectionsMaxIdleMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/connections-max-idle-ms/#connectionsmaxidlems","title":"connectionsMaxIdleMs","text":"<p>[jvm]\\ var connectionsMaxIdleMs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/metadata-max-age/","title":"metadataMaxAge","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/metadataMaxAge</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/metadata-max-age/#metadatamaxage","title":"metadataMaxAge","text":"<p>[jvm]\\ var metadataMaxAge: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/metric-reporter-classes/","title":"metricReporterClasses","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/metricReporterClasses</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/metric-reporter-classes/#metricreporterclasses","title":"metricReporterClasses","text":"<p>[jvm]\\ var metricReporterClasses: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/metrics-num-samples/","title":"metricsNumSamples","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/metricsNumSamples</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/metrics-num-samples/#metricsnumsamples","title":"metricsNumSamples","text":"<p>[jvm]\\ var metricsNumSamples: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/metrics-recording-level/","title":"metricsRecordingLevel","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/metricsRecordingLevel</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/metrics-recording-level/#metricsrecordinglevel","title":"metricsRecordingLevel","text":"<p>[jvm]\\ var metricsRecordingLevel: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/metrics-sample-window-ms/","title":"metricsSampleWindowMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/metricsSampleWindowMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/metrics-sample-window-ms/#metricssamplewindowms","title":"metricsSampleWindowMs","text":"<p>[jvm]\\ var metricsSampleWindowMs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/receive-buffer/","title":"receiveBuffer","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/receiveBuffer</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/receive-buffer/#receivebuffer","title":"receiveBuffer","text":"<p>[jvm]\\ var receiveBuffer: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/reconnect-backoff-max-ms/","title":"reconnectBackoffMaxMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/reconnectBackoffMaxMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/reconnect-backoff-max-ms/#reconnectbackoffmaxms","title":"reconnectBackoffMaxMs","text":"<p>[jvm]\\ var reconnectBackoffMaxMs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/reconnect-backoff-ms/","title":"reconnectBackoffMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/reconnectBackoffMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/reconnect-backoff-ms/#reconnectbackoffms","title":"reconnectBackoffMs","text":"<p>[jvm]\\ var reconnectBackoffMs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/request-timeout-ms/","title":"requestTimeoutMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/requestTimeoutMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/request-timeout-ms/#requesttimeoutms","title":"requestTimeoutMs","text":"<p>[jvm]\\ var requestTimeoutMs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/retries/","title":"retries","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/retries</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/retries/#retries","title":"retries","text":"<p>[jvm]\\ var retries: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/retry-backoff-ms/","title":"retryBackoffMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/retryBackoffMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/retry-backoff-ms/#retrybackoffms","title":"retryBackoffMs","text":"<p>[jvm]\\ var retryBackoffMs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/security-protocol/","title":"securityProtocol","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/securityProtocol</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/security-protocol/#securityprotocol","title":"securityProtocol","text":"<p>[jvm]\\ var securityProtocol: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/send-buffer/","title":"sendBuffer","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ClientPropertiesBuilder/sendBuffer</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-client-properties-builder/send-buffer/#sendbuffer","title":"sendBuffer","text":"<p>[jvm]\\ var sendBuffer: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-common-client-properties-builder/","title":"CommonClientPropertiesBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/CommonClientPropertiesBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-common-client-properties-builder/#commonclientpropertiesbuilder","title":"CommonClientPropertiesBuilder","text":"<p>[jvm]\\ data object CommonClientPropertiesBuilder : ClientPropertiesBuilder</p> <p>Concrete implementation of ClientPropertiesBuilder to represent the common properties</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-common-client-properties-builder/#properties","title":"Properties","text":"Name Summary bootstrapServers [jvm]var bootstrapServers: Any? clientDnsLookup [jvm]var clientDnsLookup: Any? clientId [jvm]var clientId: Any? clientRack [jvm]var clientRack: Any? connectionsMaxIdleMs [jvm]var connectionsMaxIdleMs: Any? metadataMaxAge [jvm]var metadataMaxAge: Any? metricReporterClasses [jvm]var metricReporterClasses: Any? metricsNumSamples [jvm]var metricsNumSamples: Any? metricsRecordingLevel [jvm]var metricsRecordingLevel: Any? metricsSampleWindowMs [jvm]var metricsSampleWindowMs: Any? receiveBuffer [jvm]var receiveBuffer: Any? reconnectBackoffMaxMs [jvm]var reconnectBackoffMaxMs: Any? reconnectBackoffMs [jvm]var reconnectBackoffMs: Any? requestTimeoutMs [jvm]var requestTimeoutMs: Any? retries [jvm]var retries: Any? retryBackoffMs [jvm]var retryBackoffMs: Any? securityProtocol [jvm]var securityProtocol: Any? sendBuffer [jvm]var sendBuffer: Any?"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-common-client-properties-builder/#functions","title":"Functions","text":"Name Summary build [jvm]open override fun build(): MutableMap&lt;String, Any?&gt;"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-compression-type/","title":"CompressionType","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/CompressionType</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-compression-type/#compressiontype","title":"CompressionType","text":"<p>[jvm]\\ typealias CompressionType = org.apache.kafka.common.record.CompressionType</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer/","title":"Consumer","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Consumer</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer/#consumer","title":"Consumer","text":"<p>[jvm]\\ typealias Consumer = KafkaConsumer&lt;KafkaRecordKey, GenericRecord&gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/","title":"ConsumerPropertiesBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/#consumerpropertiesbuilder","title":"ConsumerPropertiesBuilder","text":"<p>[jvm]\\ class ConsumerPropertiesBuilder(var schemaRegistryUrl: String? = null) : ClientPropertiesBuilder, SchemaRegistryProvider</p> <p>see ConsumerConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/#constructors","title":"Constructors","text":"ConsumerPropertiesBuilder [jvm]constructor(schemaRegistryUrl: String? = null)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/#properties","title":"Properties","text":"Name Summary allowAutoCreateTopics [jvm]var allowAutoCreateTopics: Any? autoCommitIntervalMs [jvm]var autoCommitIntervalMs: Any? autoOffsetReset [jvm]var autoOffsetReset: Any? bootstrapServers [jvm]var bootstrapServers: Any? checkCrcs [jvm]var checkCrcs: Any? clientDnsLookup [jvm]var clientDnsLookup: Any? clientId [jvm]var clientId: Any? clientRack [jvm]var clientRack: Any? connectionsMaxIdleMs [jvm]var connectionsMaxIdleMs: Any? defaultApiTimeoutMs [jvm]var defaultApiTimeoutMs: Any? enableAutoCommit [jvm]var enableAutoCommit: Any? excludeInternalTopics [jvm]var excludeInternalTopics: Any? fetchMaxBytes [jvm]var fetchMaxBytes: Any? fetchMaxWaitMs [jvm]var fetchMaxWaitMs: Any? fetchMinBytes [jvm]var fetchMinBytes: Any? groupId [jvm]var groupId: Any? groupInstanceId [jvm]var groupInstanceId: Any? heartbeatIntervalMs [jvm]var heartbeatIntervalMs: Any? interceptorClasses [jvm]var interceptorClasses: Any? isolationLevel [jvm]var isolationLevel: Any? keyDeserializerClass [jvm]var keyDeserializerClass: Any? maxPartitionFetchBytes [jvm]var maxPartitionFetchBytes: Any? maxPollIntervalMs [jvm]var maxPollIntervalMs: Any? maxPollRecords [jvm]var maxPollRecords: Any? metadataMaxAge [jvm]var metadataMaxAge: Any? metricReporterClasses [jvm]var metricReporterClasses: Any? metricsNumSamples [jvm]var metricsNumSamples: Any? metricsRecordingLevel [jvm]var metricsRecordingLevel: Any? metricsSampleWindowMs [jvm]var metricsSampleWindowMs: Any? partitionAssignmentStrategy [jvm]var partitionAssignmentStrategy: Any? receiveBuffer [jvm]var receiveBuffer: Any? reconnectBackoffMaxMs [jvm]var reconnectBackoffMaxMs: Any? reconnectBackoffMs [jvm]var reconnectBackoffMs: Any? requestTimeoutMs [jvm]var requestTimeoutMs: Any? retries [jvm]var retries: Any? retryBackoffMs [jvm]var retryBackoffMs: Any? schemaRegistryUrl [jvm]open override var schemaRegistryUrl: String? securityProtocol [jvm]var securityProtocol: Any? sendBuffer [jvm]var sendBuffer: Any? sessionTimeoutMs [jvm]var sessionTimeoutMs: Any? valueDeserializerClass [jvm]var valueDeserializerClass: Any?"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/#functions","title":"Functions","text":"Name Summary build [jvm]open override fun build(): KafkaProperties"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/-consumer-properties-builder/","title":"ConsumerPropertiesBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/ConsumerPropertiesBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/-consumer-properties-builder/#consumerpropertiesbuilder","title":"ConsumerPropertiesBuilder","text":"<p>[jvm]\\ constructor(schemaRegistryUrl: String? = null)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/allow-auto-create-topics/","title":"allowAutoCreateTopics","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/allowAutoCreateTopics</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/allow-auto-create-topics/#allowautocreatetopics","title":"allowAutoCreateTopics","text":"<p>[jvm]\\ var allowAutoCreateTopics: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/auto-commit-interval-ms/","title":"autoCommitIntervalMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/autoCommitIntervalMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/auto-commit-interval-ms/#autocommitintervalms","title":"autoCommitIntervalMs","text":"<p>[jvm]\\ var autoCommitIntervalMs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/auto-offset-reset/","title":"autoOffsetReset","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/autoOffsetReset</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/auto-offset-reset/#autooffsetreset","title":"autoOffsetReset","text":"<p>[jvm]\\ var autoOffsetReset: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/build/","title":"build","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/build</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/build/#build","title":"build","text":"<p>[jvm]\\ open override fun build(): KafkaProperties</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/check-crcs/","title":"checkCrcs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/checkCrcs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/check-crcs/#checkcrcs","title":"checkCrcs","text":"<p>[jvm]\\ var checkCrcs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/default-api-timeout-ms/","title":"defaultApiTimeoutMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/defaultApiTimeoutMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/default-api-timeout-ms/#defaultapitimeoutms","title":"defaultApiTimeoutMs","text":"<p>[jvm]\\ var defaultApiTimeoutMs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/enable-auto-commit/","title":"enableAutoCommit","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/enableAutoCommit</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/enable-auto-commit/#enableautocommit","title":"enableAutoCommit","text":"<p>[jvm]\\ var enableAutoCommit: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/exclude-internal-topics/","title":"excludeInternalTopics","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/excludeInternalTopics</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/exclude-internal-topics/#excludeinternaltopics","title":"excludeInternalTopics","text":"<p>[jvm]\\ var excludeInternalTopics: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/fetch-max-bytes/","title":"fetchMaxBytes","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/fetchMaxBytes</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/fetch-max-bytes/#fetchmaxbytes","title":"fetchMaxBytes","text":"<p>[jvm]\\ var fetchMaxBytes: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/fetch-max-wait-ms/","title":"fetchMaxWaitMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/fetchMaxWaitMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/fetch-max-wait-ms/#fetchmaxwaitms","title":"fetchMaxWaitMs","text":"<p>[jvm]\\ var fetchMaxWaitMs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/fetch-min-bytes/","title":"fetchMinBytes","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/fetchMinBytes</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/fetch-min-bytes/#fetchminbytes","title":"fetchMinBytes","text":"<p>[jvm]\\ var fetchMinBytes: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/group-id/","title":"groupId","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/groupId</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/group-id/#groupid","title":"groupId","text":"<p>[jvm]\\ var groupId: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/group-instance-id/","title":"groupInstanceId","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/groupInstanceId</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/group-instance-id/#groupinstanceid","title":"groupInstanceId","text":"<p>[jvm]\\ var groupInstanceId: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/heartbeat-interval-ms/","title":"heartbeatIntervalMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/heartbeatIntervalMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/heartbeat-interval-ms/#heartbeatintervalms","title":"heartbeatIntervalMs","text":"<p>[jvm]\\ var heartbeatIntervalMs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/interceptor-classes/","title":"interceptorClasses","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/interceptorClasses</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/interceptor-classes/#interceptorclasses","title":"interceptorClasses","text":"<p>[jvm]\\ var interceptorClasses: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/isolation-level/","title":"isolationLevel","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/isolationLevel</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/isolation-level/#isolationlevel","title":"isolationLevel","text":"<p>[jvm]\\ var isolationLevel: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/key-deserializer-class/","title":"keyDeserializerClass","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/keyDeserializerClass</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/key-deserializer-class/#keydeserializerclass","title":"keyDeserializerClass","text":"<p>[jvm]\\ var keyDeserializerClass: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/max-partition-fetch-bytes/","title":"maxPartitionFetchBytes","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/maxPartitionFetchBytes</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/max-partition-fetch-bytes/#maxpartitionfetchbytes","title":"maxPartitionFetchBytes","text":"<p>[jvm]\\ var maxPartitionFetchBytes: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/max-poll-interval-ms/","title":"maxPollIntervalMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/maxPollIntervalMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/max-poll-interval-ms/#maxpollintervalms","title":"maxPollIntervalMs","text":"<p>[jvm]\\ var maxPollIntervalMs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/max-poll-records/","title":"maxPollRecords","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/maxPollRecords</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/max-poll-records/#maxpollrecords","title":"maxPollRecords","text":"<p>[jvm]\\ var maxPollRecords: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/partition-assignment-strategy/","title":"partitionAssignmentStrategy","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/partitionAssignmentStrategy</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/partition-assignment-strategy/#partitionassignmentstrategy","title":"partitionAssignmentStrategy","text":"<p>[jvm]\\ var partitionAssignmentStrategy: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/schema-registry-url/","title":"schemaRegistryUrl","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/schemaRegistryUrl</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/schema-registry-url/#schemaregistryurl","title":"schemaRegistryUrl","text":"<p>[jvm]\\ open override var schemaRegistryUrl: String?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/session-timeout-ms/","title":"sessionTimeoutMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/sessionTimeoutMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/session-timeout-ms/#sessiontimeoutms","title":"sessionTimeoutMs","text":"<p>[jvm]\\ var sessionTimeoutMs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/value-deserializer-class/","title":"valueDeserializerClass","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerPropertiesBuilder/valueDeserializerClass</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-properties-builder/value-deserializer-class/#valuedeserializerclass","title":"valueDeserializerClass","text":"<p>[jvm]\\ var valueDeserializerClass: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-record-handler/","title":"ConsumerRecordHandler","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ConsumerRecordHandler</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-consumer-record-handler/#consumerrecordhandler","title":"ConsumerRecordHandler","text":"<p>[jvm]\\ typealias ConsumerRecordHandler = suspend Application.( ConsumerRecord&lt;KafkaRecordKey, GenericRecord&gt;) -&gt; Unit</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/","title":"Defaults","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Defaults</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/#defaults","title":"Defaults","text":"<p>[jvm]\\ object Defaults</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/#properties","title":"Properties","text":"Name Summary DEFAULT_CLIENT_ID [jvm]const val DEFAULT_CLIENT_ID: String DEFAULT_CONFIG_PATH [jvm]const val DEFAULT_CONFIG_PATH: String DEFAULT_CONSUMER_POLL_FREQUENCY_MS [jvm]const val DEFAULT_CONSUMER_POLL_FREQUENCY_MS: Int = 1000 DEFAULT_GROUP_ID [jvm]const val DEFAULT_GROUP_ID: String DEFAULT_SCHEMA_REGISTRY_CLIENT_TIMEOUT_MS [jvm]const val DEFAULT_SCHEMA_REGISTRY_CLIENT_TIMEOUT_MS: Long = 30000 DEFAULT_TOPIC_PARTITIONS [jvm]const val DEFAULT_TOPIC_PARTITIONS: Int = 1 DEFAULT_TOPIC_REPLICAS [jvm]const val DEFAULT_TOPIC_REPLICAS: Short"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/-d-e-f-a-u-l-t_-c-l-i-e-n-t_-i-d/","title":"DEFAULT_CLIENT_ID","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Defaults/DEFAULT_CLIENT_ID</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/-d-e-f-a-u-l-t_-c-l-i-e-n-t_-i-d/#default_client_id","title":"DEFAULT_CLIENT_ID","text":"<p>[jvm]\\ const val DEFAULT_CLIENT_ID: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/-d-e-f-a-u-l-t_-c-o-n-f-i-g_-p-a-t-h/","title":"DEFAULT_CONFIG_PATH","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Defaults/DEFAULT_CONFIG_PATH</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/-d-e-f-a-u-l-t_-c-o-n-f-i-g_-p-a-t-h/#default_config_path","title":"DEFAULT_CONFIG_PATH","text":"<p>[jvm]\\ const val DEFAULT_CONFIG_PATH: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/-d-e-f-a-u-l-t_-c-o-n-s-u-m-e-r_-p-o-l-l_-f-r-e-q-u-e-n-c-y_-m-s/","title":"DEFAULT_CONSUMER_POLL_FREQUENCY_MS","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Defaults/DEFAULT_CONSUMER_POLL_FREQUENCY_MS</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/-d-e-f-a-u-l-t_-c-o-n-s-u-m-e-r_-p-o-l-l_-f-r-e-q-u-e-n-c-y_-m-s/#default_consumer_poll_frequency_ms","title":"DEFAULT_CONSUMER_POLL_FREQUENCY_MS","text":"<p>[jvm]\\ const val DEFAULT_CONSUMER_POLL_FREQUENCY_MS: Int = 1000</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/-d-e-f-a-u-l-t_-g-r-o-u-p_-i-d/","title":"DEFAULT_GROUP_ID","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Defaults/DEFAULT_GROUP_ID</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/-d-e-f-a-u-l-t_-g-r-o-u-p_-i-d/#default_group_id","title":"DEFAULT_GROUP_ID","text":"<p>[jvm]\\ const val DEFAULT_GROUP_ID: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/-d-e-f-a-u-l-t_-s-c-h-e-m-a_-r-e-g-i-s-t-r-y_-c-l-i-e-n-t_-t-i-m-e-o-u-t_-m-s/","title":"DEFAULT_SCHEMA_REGISTRY_CLIENT_TIMEOUT_MS","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Defaults/DEFAULT_SCHEMA_REGISTRY_CLIENT_TIMEOUT_MS</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/-d-e-f-a-u-l-t_-s-c-h-e-m-a_-r-e-g-i-s-t-r-y_-c-l-i-e-n-t_-t-i-m-e-o-u-t_-m-s/#default_schema_registry_client_timeout_ms","title":"DEFAULT_SCHEMA_REGISTRY_CLIENT_TIMEOUT_MS","text":"<p>[jvm]\\ const val DEFAULT_SCHEMA_REGISTRY_CLIENT_TIMEOUT_MS: Long = 30000</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/-d-e-f-a-u-l-t_-t-o-p-i-c_-p-a-r-t-i-t-i-o-n-s/","title":"DEFAULT_TOPIC_PARTITIONS","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Defaults/DEFAULT_TOPIC_PARTITIONS</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/-d-e-f-a-u-l-t_-t-o-p-i-c_-p-a-r-t-i-t-i-o-n-s/#default_topic_partitions","title":"DEFAULT_TOPIC_PARTITIONS","text":"<p>[jvm]\\ const val DEFAULT_TOPIC_PARTITIONS: Int = 1</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/-d-e-f-a-u-l-t_-t-o-p-i-c_-r-e-p-l-i-c-a-s/","title":"DEFAULT_TOPIC_REPLICAS","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Defaults/DEFAULT_TOPIC_REPLICAS</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-defaults/-d-e-f-a-u-l-t_-t-o-p-i-c_-r-e-p-l-i-c-a-s/#default_topic_replicas","title":"DEFAULT_TOPIC_REPLICAS","text":"<p>[jvm]\\ const val DEFAULT_TOPIC_REPLICAS: Short</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-file-config/","title":"FileConfig","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/FileConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-file-config/#fileconfig","title":"FileConfig","text":"<p>[jvm]\\ object FileConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-file-config/#properties","title":"Properties","text":"Name Summary Kafka [jvm]val Kafka: ApplicationPlugin&lt;KafkaFileConfig&gt;Plugin for setting up a kafka client, configured in application config file Example:"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-file-config/#functions","title":"Functions","text":"Name Summary Kafka [jvm]fun Kafka(configurationPath: String): ApplicationPlugin&lt;KafkaFileConfig&gt; kafka [jvm]fun Application.kafka(configurationPath: String = DEFAULT_CONFIG_PATH, config: KafkaFileConfig.() -&gt; Unit)Installs the Kafka plugin with the given KafkaFileConfig block"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-file-config/-kafka/","title":"Kafka","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/FileConfig/Kafka</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-file-config/-kafka/#kafka","title":"Kafka","text":"<p>[jvm]\\ fun Kafka( configurationPath: String): ApplicationPlugin&lt;KafkaFileConfig&gt;</p> <p>[jvm]\\ val Kafka: ApplicationPlugin&lt;KafkaFileConfig&gt;</p> <p>Plugin for setting up a kafka client, configured in application config file Example:</p> <pre><code>install(Kafka) {\n     consumerConfig {\n         consumerRecordHandler(\"my-topic) { record -&gt;\n             myService.save(record)\n         )\n    }\n}\n@receiver [Application] the ktor server application\n@param configurationPath The path to the configuration in the application configuration file\n@param config Configuration block for the plugin, see [KafkaConsumerConfig]\n</code></pre>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-file-config/kafka/","title":"kafka","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/FileConfig/kafka</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-file-config/kafka/#kafka","title":"kafka","text":"<p>[jvm]\\ fun Application.kafka( configurationPath: String = DEFAULT_CONFIG_PATH, config: KafkaFileConfig.() -&gt; Unit)</p> <p>Installs the Kafka plugin with the given KafkaFileConfig block</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-config/","title":"KafkaConfig","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/KafkaConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-config/#kafkaconfig","title":"KafkaConfig","text":"<p>[jvm]\\ class KafkaConfig : AbstractKafkaConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-config/#constructors","title":"Constructors","text":"KafkaConfig [jvm]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-config/#properties","title":"Properties","text":"Name Summary consumerConfig [jvm]var consumerConfig: KafkaConsumerConfig?Because the consumer is operating in the background, it can be defined in the setup phase schemaRegistrationTimeoutMs [jvm]var schemaRegistrationTimeoutMs: LongSchema registration timeout schemaRegistryUrl [jvm]open override var schemaRegistryUrl: String?The schema registry url, if set, a client will be created and can be accessed later to register schemas manually, if schemas is left empty"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-config/#functions","title":"Functions","text":"Name Summary admin [jvm]fun KafkaConfig.admin(configuration: AdminPropertiesBuilder.() -&gt; Unit = { AdminPropertiesBuilder() }) common [jvm]fun KafkaConfig.common(configuration: CommonClientPropertiesBuilder.() -&gt; Unit = { CommonClientPropertiesBuilder }) consumer [jvm]fun KafkaConfig.consumer(configuration: ConsumerPropertiesBuilder.() -&gt; Unit = { ConsumerPropertiesBuilder(schemaRegistryUrl) }) consumerConfig [jvm]fun AbstractKafkaConfig.consumerConfig(configuration: KafkaConsumerConfig.() -&gt; Unit = { }) producer [jvm]fun KafkaConfig.producer(configuration: ProducerPropertiesBuilder.() -&gt; Unit = { ProducerPropertiesBuilder(schemaRegistryUrl) }) registerSchemas [jvm]fun AbstractKafkaConfig.registerSchemas(configuration: SchemaRegistrationBuilder.() -&gt; Unit = { SchemaRegistrationBuilder() }) topic [jvm]fun KafkaConfig.topic(name: TopicName, block: TopicBuilder.() -&gt; Unit)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-config/-kafka-config/","title":"KafkaConfig","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/KafkaConfig/KafkaConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-config/-kafka-config/#kafkaconfig","title":"KafkaConfig","text":"<p>[jvm]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-config/schema-registry-url/","title":"schemaRegistryUrl","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/KafkaConfig/schemaRegistryUrl</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-config/schema-registry-url/#schemaregistryurl","title":"schemaRegistryUrl","text":"<p>[jvm]\\ open override var schemaRegistryUrl: String?</p> <p>The schema registry url, if set, a client will be created and can be accessed later to register schemas manually, if schemas is left empty</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-consumer-config/","title":"KafkaConsumerConfig","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/KafkaConsumerConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-consumer-config/#kafkaconsumerconfig","title":"KafkaConsumerConfig","text":"<p>[jvm]\\ class KafkaConsumerConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-consumer-config/#constructors","title":"Constructors","text":"KafkaConsumerConfig [jvm]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-consumer-config/#properties","title":"Properties","text":"Name Summary consumerPollFrequency [jvm]val consumerPollFrequency: Duration consumerRecordHandlers [jvm]val consumerRecordHandlers: MutableMap&lt;TopicName, ConsumerRecordHandler&gt;"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-consumer-config/#functions","title":"Functions","text":"Name Summary consumerRecordHandler [jvm]fun KafkaConsumerConfig.consumerRecordHandler(topicName: TopicName, handler: ConsumerRecordHandler)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-consumer-config/-kafka-consumer-config/","title":"KafkaConsumerConfig","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/KafkaConsumerConfig/KafkaConsumerConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-consumer-config/-kafka-consumer-config/#kafkaconsumerconfig","title":"KafkaConsumerConfig","text":"<p>[jvm]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-consumer-config/consumer-poll-frequency/","title":"consumerPollFrequency","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/KafkaConsumerConfig/consumerPollFrequency</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-consumer-config/consumer-poll-frequency/#consumerpollfrequency","title":"consumerPollFrequency","text":"<p>[jvm]\\ val consumerPollFrequency: Duration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-consumer-config/consumer-record-handlers/","title":"consumerRecordHandlers","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/KafkaConsumerConfig/consumerRecordHandlers</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-consumer-config/consumer-record-handlers/#consumerrecordhandlers","title":"consumerRecordHandlers","text":"<p>[jvm]\\ val consumerRecordHandlers: MutableMap &lt;TopicName, ConsumerRecordHandler&gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-dsl/","title":"KafkaDsl","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/KafkaDsl</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-dsl/#kafkadsl","title":"KafkaDsl","text":"<p>[jvm]\\ @DslMarker</p> <p>annotation class KafkaDsl</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-file-config/","title":"KafkaFileConfig","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/KafkaFileConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-file-config/#kafkafileconfig","title":"KafkaFileConfig","text":"<p>[jvm]\\ class KafkaFileConfig(config: ApplicationConfig) : AbstractKafkaConfig</p> <p>Configuration for the Kafka plugin</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-file-config/#constructors","title":"Constructors","text":"KafkaFileConfig [jvm]constructor(config: ApplicationConfig)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-file-config/#properties","title":"Properties","text":"Name Summary consumerConfig [jvm]var consumerConfig: KafkaConsumerConfig?Because the consumer is operating in the background, it can be defined in the setup phase schemaRegistrationTimeoutMs [jvm]var schemaRegistrationTimeoutMs: LongSchema registration timeout schemaRegistryUrl [jvm]open override var schemaRegistryUrl: String?The schema registry url, if set, a client will be created and can be accessed later to register schemas manually, if schemas is left empty"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-file-config/#functions","title":"Functions","text":"Name Summary consumerConfig [jvm]fun AbstractKafkaConfig.consumerConfig(configuration: KafkaConsumerConfig.() -&gt; Unit = { }) registerSchemas [jvm]fun AbstractKafkaConfig.registerSchemas(configuration: SchemaRegistrationBuilder.() -&gt; Unit = { SchemaRegistrationBuilder() })"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-file-config/-kafka-file-config/","title":"KafkaFileConfig","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/KafkaFileConfig/KafkaFileConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-file-config/-kafka-file-config/#kafkafileconfig","title":"KafkaFileConfig","text":"<p>[jvm]\\ constructor(config: ApplicationConfig)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-file-config/schema-registry-url/","title":"schemaRegistryUrl","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/KafkaFileConfig/schemaRegistryUrl</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-file-config/schema-registry-url/#schemaregistryurl","title":"schemaRegistryUrl","text":"<p>[jvm]\\ open override var schemaRegistryUrl: String?</p> <p>The schema registry url, if set, a client will be created and can be accessed later to register schemas manually, if schemas is left empty</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-properties/","title":"KafkaProperties","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/KafkaProperties</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-properties/#kafkaproperties","title":"KafkaProperties","text":"<p>[jvm]\\ typealias KafkaProperties = MutableMap &lt;String, Any ?&gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-properties-builder/","title":"KafkaPropertiesBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/KafkaPropertiesBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-properties-builder/#kafkapropertiesbuilder","title":"KafkaPropertiesBuilder","text":"<p>interface KafkaPropertiesBuilder</p> <p>KafkaDsl Builder for KafkaProperties</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-properties-builder/#inheritors","title":"Inheritors","text":"TopicPropertiesBuilder ClientPropertiesBuilder"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-properties-builder/#functions","title":"Functions","text":"Name Summary build [jvm]abstract fun build(): KafkaProperties"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-properties-builder/build/","title":"build","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/KafkaPropertiesBuilder/build</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-properties-builder/build/#build","title":"build","text":"<p>[jvm]\\ abstract fun build(): KafkaProperties</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-record-key/","title":"KafkaRecordKey","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/KafkaRecordKey</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-kafka-record-key/#kafkarecordkey","title":"KafkaRecordKey","text":"<p>[jvm]\\ typealias KafkaRecordKey = String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/","title":"MessageTimestampType","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/MessageTimestampType</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/#messagetimestamptype","title":"MessageTimestampType","text":"<p>[jvm]\\ enum MessageTimestampType : Enum &lt;MessageTimestampType&gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/#entries","title":"Entries","text":"CreateTime [jvm]CreateTime LogAppendTime [jvm]LogAppendTime"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/#properties","title":"Properties","text":"Name Summary entries [jvm]val entries: EnumEntries&lt;MessageTimestampType&gt;Returns a representation of an immutable list of all enum entries, in the order they're declared. name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/#functions","title":"Functions","text":"Name Summary valueOf [jvm]fun valueOf(value: String): MessageTimestampTypeReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [jvm]fun values(): Array&lt;MessageTimestampType&gt;Returns an array containing the constants of this enum type, in the order they're declared."},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/entries/","title":"entries","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/MessageTimestampType/entries</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/entries/#entries","title":"entries","text":"<p>[jvm]\\ val entries: EnumEntries &lt;MessageTimestampType&gt;</p> <p>Returns a representation of an immutable list of all enum entries, in the order they're declared.</p> <p>This method may be used to iterate over the enum entries.</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/value-of/","title":"valueOf","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/MessageTimestampType/valueOf</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/value-of/#valueof","title":"valueOf","text":"<p>[jvm]\\ fun valueOf( value: String): MessageTimestampType</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/values/","title":"values","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/MessageTimestampType/values</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/values/#values","title":"values","text":"<p>[jvm]\\ fun values(): Array &lt;MessageTimestampType&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they're declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/-create-time/","title":"CreateTime","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/MessageTimestampType/CreateTime</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/-create-time/#createtime","title":"CreateTime","text":"<p>[jvm]\\ CreateTime</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/-create-time/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/-log-append-time/","title":"LogAppendTime","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/MessageTimestampType/LogAppendTime</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/-log-append-time/#logappendtime","title":"LogAppendTime","text":"<p>[jvm]\\ LogAppendTime</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-message-timestamp-type/-log-append-time/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer/","title":"Producer","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/Producer</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer/#producer","title":"Producer","text":"<p>[jvm]\\ typealias Producer = KafkaProducer&lt;KafkaRecordKey, GenericRecord&gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/","title":"ProducerPropertiesBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/#producerpropertiesbuilder","title":"ProducerPropertiesBuilder","text":"<p>[jvm]\\ class ProducerPropertiesBuilder(var schemaRegistryUrl: String? = null) : ClientPropertiesBuilder, SchemaRegistryProvider</p> <p>see ProducerConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/#constructors","title":"Constructors","text":"ProducerPropertiesBuilder [jvm]constructor(schemaRegistryUrl: String? = null)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/#properties","title":"Properties","text":"Name Summary acks [jvm]var acks: Any? batchSize [jvm]var batchSize: Any? bootstrapServers [jvm]var bootstrapServers: Any? bufferMemory [jvm]var bufferMemory: Any? clientDnsLookup [jvm]var clientDnsLookup: Any? clientId [jvm]var clientId: Any? clientRack [jvm]var clientRack: Any? compressionType [jvm]var compressionType: CompressionType? connectionsMaxIdleMs [jvm]var connectionsMaxIdleMs: Any? deliveryTimeoutMs [jvm]var deliveryTimeoutMs: Any? enableIdempotence [jvm]var enableIdempotence: Any? interceptorClasses [jvm]var interceptorClasses: Any? keySerializerClass [jvm]var keySerializerClass: Any? lingerMs [jvm]var lingerMs: Any? maxBlockMs [jvm]var maxBlockMs: Any? maxInFlightRequestsPerConnection [jvm]var maxInFlightRequestsPerConnection: Any? maxRequestSize [jvm]var maxRequestSize: Any? metadataMaxAge [jvm]var metadataMaxAge: Any? metricReporterClasses [jvm]var metricReporterClasses: Any? metricsNumSamples [jvm]var metricsNumSamples: Any? metricsRecordingLevel [jvm]var metricsRecordingLevel: Any? metricsSampleWindowMs [jvm]var metricsSampleWindowMs: Any? partitionerClass [jvm]var partitionerClass: Any? receiveBuffer [jvm]var receiveBuffer: Any? reconnectBackoffMaxMs [jvm]var reconnectBackoffMaxMs: Any? reconnectBackoffMs [jvm]var reconnectBackoffMs: Any? requestTimeoutMs [jvm]var requestTimeoutMs: Any? retries [jvm]var retries: Any? retryBackoffMs [jvm]var retryBackoffMs: Any? schemaRegistryUrl [jvm]open override var schemaRegistryUrl: String? securityProtocol [jvm]var securityProtocol: Any? sendBuffer [jvm]var sendBuffer: Any? transactionalId [jvm]var transactionalId: Any? transactionTimeout [jvm]var transactionTimeout: Any? valueSerializerClass [jvm]var valueSerializerClass: Any?"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/#functions","title":"Functions","text":"Name Summary build [jvm]open override fun build(): KafkaProperties"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/-producer-properties-builder/","title":"ProducerPropertiesBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/ProducerPropertiesBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/-producer-properties-builder/#producerpropertiesbuilder","title":"ProducerPropertiesBuilder","text":"<p>[jvm]\\ constructor(schemaRegistryUrl: String? = null)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/acks/","title":"acks","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/acks</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/acks/#acks","title":"acks","text":"<p>[jvm]\\ var acks: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/batch-size/","title":"batchSize","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/batchSize</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/batch-size/#batchsize","title":"batchSize","text":"<p>[jvm]\\ var batchSize: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/buffer-memory/","title":"bufferMemory","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/bufferMemory</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/buffer-memory/#buffermemory","title":"bufferMemory","text":"<p>[jvm]\\ var bufferMemory: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/build/","title":"build","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/build</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/build/#build","title":"build","text":"<p>[jvm]\\ open override fun build(): KafkaProperties</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/compression-type/","title":"compressionType","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/compressionType</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/compression-type/#compressiontype","title":"compressionType","text":"<p>[jvm]\\ var compressionType: CompressionType?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/delivery-timeout-ms/","title":"deliveryTimeoutMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/deliveryTimeoutMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/delivery-timeout-ms/#deliverytimeoutms","title":"deliveryTimeoutMs","text":"<p>[jvm]\\ var deliveryTimeoutMs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/enable-idempotence/","title":"enableIdempotence","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/enableIdempotence</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/enable-idempotence/#enableidempotence","title":"enableIdempotence","text":"<p>[jvm]\\ var enableIdempotence: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/interceptor-classes/","title":"interceptorClasses","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/interceptorClasses</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/interceptor-classes/#interceptorclasses","title":"interceptorClasses","text":"<p>[jvm]\\ var interceptorClasses: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/key-serializer-class/","title":"keySerializerClass","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/keySerializerClass</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/key-serializer-class/#keyserializerclass","title":"keySerializerClass","text":"<p>[jvm]\\ var keySerializerClass: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/linger-ms/","title":"lingerMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/lingerMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/linger-ms/#lingerms","title":"lingerMs","text":"<p>[jvm]\\ var lingerMs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/max-block-ms/","title":"maxBlockMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/maxBlockMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/max-block-ms/#maxblockms","title":"maxBlockMs","text":"<p>[jvm]\\ var maxBlockMs: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/max-in-flight-requests-per-connection/","title":"maxInFlightRequestsPerConnection","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/maxInFlightRequestsPerConnection</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/max-in-flight-requests-per-connection/#maxinflightrequestsperconnection","title":"maxInFlightRequestsPerConnection","text":"<p>[jvm]\\ var maxInFlightRequestsPerConnection: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/max-request-size/","title":"maxRequestSize","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/maxRequestSize</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/max-request-size/#maxrequestsize","title":"maxRequestSize","text":"<p>[jvm]\\ var maxRequestSize: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/partitioner-class/","title":"partitionerClass","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/partitionerClass</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/partitioner-class/#partitionerclass","title":"partitionerClass","text":"<p>[jvm]\\ var partitionerClass: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/schema-registry-url/","title":"schemaRegistryUrl","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/schemaRegistryUrl</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/schema-registry-url/#schemaregistryurl","title":"schemaRegistryUrl","text":"<p>[jvm]\\ open override var schemaRegistryUrl: String?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/transaction-timeout/","title":"transactionTimeout","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/transactionTimeout</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/transaction-timeout/#transactiontimeout","title":"transactionTimeout","text":"<p>[jvm]\\ var transactionTimeout: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/transactional-id/","title":"transactionalId","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/transactionalId</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/transactional-id/#transactionalid","title":"transactionalId","text":"<p>[jvm]\\ var transactionalId: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/value-serializer-class/","title":"valueSerializerClass","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/ProducerPropertiesBuilder/valueSerializerClass</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-producer-properties-builder/value-serializer-class/#valueserializerclass","title":"valueSerializerClass","text":"<p>[jvm]\\ var valueSerializerClass: Any?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-schema-registration-builder/","title":"SchemaRegistrationBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/SchemaRegistrationBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-schema-registration-builder/#schemaregistrationbuilder","title":"SchemaRegistrationBuilder","text":"<p>[jvm]\\ class SchemaRegistrationBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-schema-registration-builder/#constructors","title":"Constructors","text":"SchemaRegistrationBuilder [jvm]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-schema-registration-builder/#functions","title":"Functions","text":"Name Summary at [jvm]infix fun KClass&lt;out Any&gt;.at(topicName: TopicName) using [jvm]fun using(provider: () -&gt; HttpClient)optionally provide a client to register schemas, by default, CIO would be used. In any case, the following it would be configured with serialization json and the configured AbstractKafkaConfig.schemaRegistrationTimeoutMs"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-schema-registration-builder/-schema-registration-builder/","title":"SchemaRegistrationBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/SchemaRegistrationBuilder/SchemaRegistrationBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-schema-registration-builder/-schema-registration-builder/#schemaregistrationbuilder","title":"SchemaRegistrationBuilder","text":"<p>[jvm]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-schema-registration-builder/at/","title":"at","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/SchemaRegistrationBuilder/at</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-schema-registration-builder/at/#at","title":"at","text":"<p>[jvm]\\ infix fun KClass &lt;out Any&gt;.at( topicName: TopicName)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-schema-registration-builder/using/","title":"using","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/SchemaRegistrationBuilder/using</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-schema-registration-builder/using/#using","title":"using","text":"<p>[jvm]\\ fun using(provider: () -&gt; HttpClient)</p> <p>optionally provide a client to register schemas, by default, CIO would be used. In any case, the following it would be configured with serialization json and the configured AbstractKafkaConfig.schemaRegistrationTimeoutMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/","title":"TopicBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/#topicbuilder","title":"TopicBuilder","text":"<p>[jvm]\\ class TopicBuilder(name: TopicName)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/#constructors","title":"Constructors","text":"TopicBuilder [jvm]constructor(name: TopicName)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/#properties","title":"Properties","text":"Name Summary partitions [jvm]var partitions: Int replicas [jvm]var replicas: Short replicasAssignments [jvm]var replicasAssignments: Map&lt;Int, List&lt;Int?&gt;&gt;?"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/#functions","title":"Functions","text":"Name Summary configs [jvm]fun configs(config: TopicPropertiesBuilder.() -&gt; Unit)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/-topic-builder/","title":"TopicBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicBuilder/TopicBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/-topic-builder/#topicbuilder","title":"TopicBuilder","text":"<p>[jvm]\\ constructor(name: TopicName)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/configs/","title":"configs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicBuilder/configs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/configs/#configs","title":"configs","text":"<p>[jvm]\\ fun configs(config: TopicPropertiesBuilder.() -&gt; Unit)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/partitions/","title":"partitions","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicBuilder/partitions</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/partitions/#partitions","title":"partitions","text":"<p>[jvm]\\ var partitions: Int</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/replicas-assignments/","title":"replicasAssignments","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicBuilder/replicasAssignments</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/replicas-assignments/#replicasassignments","title":"replicasAssignments","text":"<p>[jvm]\\ var replicasAssignments: Map &lt;Int, List &lt;Int?&gt;&gt;?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/replicas/","title":"replicas","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicBuilder/replicas</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/replicas/#replicas","title":"replicas","text":"<p>[jvm]\\ var replicas: Short</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/-companion/","title":"Companion","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicBuilder/Companion</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/-companion/#functions","title":"Functions","text":"Name Summary froMap [jvm]fun froMap(map: Map&lt;String, Any?&gt;): TopicBuilder"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/-companion/fro-map/","title":"froMap","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicBuilder/Companion/froMap</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-builder/-companion/fro-map/#fromap","title":"froMap","text":"<p>[jvm]\\ fun froMap(map: Map &lt;String, Any ?&gt;): TopicBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-name/","title":"TopicName","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-name/#topicname","title":"TopicName","text":"<p>[jvm]\\ @JvmInline</p> <p>value class TopicName(val value: String)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-name/#constructors","title":"Constructors","text":"TopicName [jvm]constructor(value: String)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-name/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-name/#properties","title":"Properties","text":"Name Summary value [jvm]val value: String"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-name/-topic-name/","title":"TopicName","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicName/TopicName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-name/-topic-name/#topicname","title":"TopicName","text":"<p>[jvm]\\ constructor(value: String)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-name/value/","title":"value","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicName/value</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-name/value/#value","title":"value","text":"<p>[jvm]\\ val value: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-name/-companion/","title":"Companion","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicName/Companion</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-name/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-name/-companion/#functions","title":"Functions","text":"Name Summary named [jvm]infix fun named(name: String): TopicName"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-name/-companion/named/","title":"named","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicName/Companion/named</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-name/-companion/named/#named","title":"named","text":"<p>[jvm]\\ infix fun named( name: String): TopicName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/","title":"TopicPropertiesBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/#topicpropertiesbuilder","title":"TopicPropertiesBuilder","text":"<p>[jvm]\\ class TopicPropertiesBuilder : KafkaPropertiesBuilder</p> <p>See TopicConfig</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/#constructors","title":"Constructors","text":"TopicPropertiesBuilder [jvm]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/#properties","title":"Properties","text":"Name Summary cleanupPolicy [jvm]var cleanupPolicy: String? compressionType [jvm]var compressionType: CompressionType? deleteRetentionMs [jvm]var deleteRetentionMs: Long? fileDeleteDelayMs [jvm]var fileDeleteDelayMs: Long? flushMessagesInterval [jvm]var flushMessagesInterval: Long? flushMs [jvm]var flushMs: Long? indexIntervalBytes [jvm]var indexIntervalBytes: Int? maxCompactionLagMs [jvm]var maxCompactionLagMs: Long? maxMessageBytes [jvm]var maxMessageBytes: Int? messageDownconversionEnable [jvm]var messageDownconversionEnable: Boolean? messageFormatVersion [jvm]var messageFormatVersion: String? messageTimestampDifferenceMaxMs [jvm]var messageTimestampDifferenceMaxMs: Long? messageTimestampType [jvm]var messageTimestampType: MessageTimestampType? minCleanableDirtyRatio [jvm]var minCleanableDirtyRatio: Float? minCompactionLagMs [jvm]var minCompactionLagMs: Long? minInSyncReplicas [jvm]var minInSyncReplicas: Int? preallocate [jvm]var preallocate: Boolean? retentionBytes [jvm]var retentionBytes: Long? retentionMs [jvm]var retentionMs: Long? segmentBytes [jvm]var segmentBytes: Int? segmentIndexBytes [jvm]var segmentIndexBytes: Int? segmentJitterMs [jvm]var segmentJitterMs: Long? segmentMs [jvm]var segmentMs: Long? uncleanLeaderElectionEnable [jvm]var uncleanLeaderElectionEnable: Boolean?"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/#functions","title":"Functions","text":"Name Summary build [jvm]open override fun build(): KafkaProperties"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/-topic-properties-builder/","title":"TopicPropertiesBuilder","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/TopicPropertiesBuilder</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/-topic-properties-builder/#topicpropertiesbuilder","title":"TopicPropertiesBuilder","text":"<p>[jvm]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/build/","title":"build","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/build</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/build/#build","title":"build","text":"<p>[jvm]\\ open override fun build(): KafkaProperties</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/cleanup-policy/","title":"cleanupPolicy","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/cleanupPolicy</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/cleanup-policy/#cleanuppolicy","title":"cleanupPolicy","text":"<p>[jvm]\\ var cleanupPolicy: String?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/compression-type/","title":"compressionType","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/compressionType</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/compression-type/#compressiontype","title":"compressionType","text":"<p>[jvm]\\ var compressionType: CompressionType?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/delete-retention-ms/","title":"deleteRetentionMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/deleteRetentionMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/delete-retention-ms/#deleteretentionms","title":"deleteRetentionMs","text":"<p>[jvm]\\ var deleteRetentionMs: Long?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/file-delete-delay-ms/","title":"fileDeleteDelayMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/fileDeleteDelayMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/file-delete-delay-ms/#filedeletedelayms","title":"fileDeleteDelayMs","text":"<p>[jvm]\\ var fileDeleteDelayMs: Long?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/flush-messages-interval/","title":"flushMessagesInterval","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/flushMessagesInterval</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/flush-messages-interval/#flushmessagesinterval","title":"flushMessagesInterval","text":"<p>[jvm]\\ var flushMessagesInterval: Long?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/flush-ms/","title":"flushMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/flushMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/flush-ms/#flushms","title":"flushMs","text":"<p>[jvm]\\ var flushMs: Long?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/index-interval-bytes/","title":"indexIntervalBytes","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/indexIntervalBytes</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/index-interval-bytes/#indexintervalbytes","title":"indexIntervalBytes","text":"<p>[jvm]\\ var indexIntervalBytes: Int?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/max-compaction-lag-ms/","title":"maxCompactionLagMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/maxCompactionLagMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/max-compaction-lag-ms/#maxcompactionlagms","title":"maxCompactionLagMs","text":"<p>[jvm]\\ var maxCompactionLagMs: Long?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/max-message-bytes/","title":"maxMessageBytes","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/maxMessageBytes</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/max-message-bytes/#maxmessagebytes","title":"maxMessageBytes","text":"<p>[jvm]\\ var maxMessageBytes: Int?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/message-downconversion-enable/","title":"messageDownconversionEnable","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/messageDownconversionEnable</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/message-downconversion-enable/#messagedownconversionenable","title":"messageDownconversionEnable","text":"<p>[jvm]\\ var messageDownconversionEnable: Boolean?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/message-format-version/","title":"messageFormatVersion","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/messageFormatVersion</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/message-format-version/#messageformatversion","title":"messageFormatVersion","text":"<p>[jvm]\\ var messageFormatVersion: String?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/message-timestamp-difference-max-ms/","title":"messageTimestampDifferenceMaxMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/messageTimestampDifferenceMaxMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/message-timestamp-difference-max-ms/#messagetimestampdifferencemaxms","title":"messageTimestampDifferenceMaxMs","text":"<p>[jvm]\\ var messageTimestampDifferenceMaxMs: Long?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/message-timestamp-type/","title":"messageTimestampType","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/messageTimestampType</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/message-timestamp-type/#messagetimestamptype","title":"messageTimestampType","text":"<p>[jvm]\\ var messageTimestampType: MessageTimestampType?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/min-cleanable-dirty-ratio/","title":"minCleanableDirtyRatio","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/minCleanableDirtyRatio</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/min-cleanable-dirty-ratio/#mincleanabledirtyratio","title":"minCleanableDirtyRatio","text":"<p>[jvm]\\ var minCleanableDirtyRatio: Float?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/min-compaction-lag-ms/","title":"minCompactionLagMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/minCompactionLagMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/min-compaction-lag-ms/#mincompactionlagms","title":"minCompactionLagMs","text":"<p>[jvm]\\ var minCompactionLagMs: Long?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/min-in-sync-replicas/","title":"minInSyncReplicas","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/minInSyncReplicas</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/min-in-sync-replicas/#mininsyncreplicas","title":"minInSyncReplicas","text":"<p>[jvm]\\ var minInSyncReplicas: Int?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/preallocate/","title":"preallocate","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/preallocate</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/preallocate/#preallocate","title":"preallocate","text":"<p>[jvm]\\ var preallocate: Boolean?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/retention-bytes/","title":"retentionBytes","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/retentionBytes</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/retention-bytes/#retentionbytes","title":"retentionBytes","text":"<p>[jvm]\\ var retentionBytes: Long?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/retention-ms/","title":"retentionMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/retentionMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/retention-ms/#retentionms","title":"retentionMs","text":"<p>[jvm]\\ var retentionMs: Long?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/segment-bytes/","title":"segmentBytes","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/segmentBytes</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/segment-bytes/#segmentbytes","title":"segmentBytes","text":"<p>[jvm]\\ var segmentBytes: Int?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/segment-index-bytes/","title":"segmentIndexBytes","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/segmentIndexBytes</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/segment-index-bytes/#segmentindexbytes","title":"segmentIndexBytes","text":"<p>[jvm]\\ var segmentIndexBytes: Int?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/segment-jitter-ms/","title":"segmentJitterMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/segmentJitterMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/segment-jitter-ms/#segmentjitterms","title":"segmentJitterMs","text":"<p>[jvm]\\ var segmentJitterMs: Long?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/segment-ms/","title":"segmentMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/segmentMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/segment-ms/#segmentms","title":"segmentMs","text":"<p>[jvm]\\ var segmentMs: Long?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/unclean-leader-election-enable/","title":"uncleanLeaderElectionEnable","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/TopicPropertiesBuilder/uncleanLeaderElectionEnable</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka/-topic-properties-builder/unclean-leader-election-enable/#uncleanleaderelectionenable","title":"uncleanLeaderElectionEnable","text":"<p>[jvm]\\ var uncleanLeaderElectionEnable: Boolean?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/","title":"io.github.flaxoos.ktor.server.plugins.kafka.components","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/#types","title":"Types","text":"Name Summary SchemaRegistryClient [jvm]class SchemaRegistryClient(providedClient: HttpClient, schemaRegistryUrl: String, timeoutMs: Long)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/#functions","title":"Functions","text":"Name Summary createSchemaRegistryClient [jvm]fun createSchemaRegistryClient(schemaRegistryUrl: String, timeoutMs: Long, clientProvider: () -&gt; HttpClient): SchemaRegistryClient fromRecord [jvm]inline fun &lt;T&gt; fromRecord(record: GenericRecord): Tconverts a GenericRecord to a T subscribe [jvm]fun Application.subscribe(consumer: Consumer, pollFrequency: Duration, topics: List&lt;TopicName&gt;): Flow&lt;ConsumerRecord&lt;String, GenericRecord&gt;&gt;Subscribes a Consumer to a list of topics, returning a flow of records toRecord [jvm]inline fun &lt;T&gt; T.toRecord(): GenericRecordconverts a T to a GenericRecord"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/create-schema-registry-client/","title":"createSchemaRegistryClient","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/createSchemaRegistryClient</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/create-schema-registry-client/#createschemaregistryclient","title":"createSchemaRegistryClient","text":"<p>[jvm]\\ fun createSchemaRegistryClient( schemaRegistryUrl: String, timeoutMs: Long, clientProvider: () -&gt; HttpClient): SchemaRegistryClient</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/from-record/","title":"fromRecord","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/fromRecord</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/from-record/#fromrecord","title":"fromRecord","text":"<p>[jvm]\\ inline fun &lt;T&gt; fromRecord(record: GenericRecord): T</p> <p>converts a GenericRecord to a T</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/from-record/#return","title":"Return","text":"<p>the resulting T must be annotated with Serializable</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/from-record/#parameters","title":"Parameters","text":"<p>jvm</p> record GenericRecord"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/from-record/#throws","title":"Throws","text":"SerializationException if serialization fails"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/subscribe/","title":"subscribe","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/subscribe</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/subscribe/#subscribe","title":"subscribe","text":"<p>[jvm]\\ fun Application.subscribe( consumer: Consumer, pollFrequency: Duration, topics: List &lt;TopicName&gt;): Flow&lt;ConsumerRecord&lt;String, GenericRecord&gt;&gt;</p> <p>Subscribes a Consumer to a list of topics, returning a flow of records</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/subscribe/#receiver","title":"Receiver","text":"<p>Application the ktor server application</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/subscribe/#return","title":"Return","text":"<p>Flow of records</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/subscribe/#parameters","title":"Parameters","text":"<p>jvm</p> consumer Consumer to subscribe pollFrequency Duration at what frequency should the consumer poll, in practice the timeout passed to KafkaConsumer.poll topics List of topics to subscribe to"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/to-record/","title":"toRecord","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/toRecord</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/to-record/#torecord","title":"toRecord","text":"<p>[jvm]\\ inline fun &lt;T&gt; T.toRecord(): GenericRecord</p> <p>converts a T to a GenericRecord</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/to-record/#receiver","title":"Receiver","text":"<p>the T to convert, must be annotated with Serializable</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/to-record/#return","title":"Return","text":"<p>the resulting GenericRecord</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/to-record/#throws","title":"Throws","text":"SerializationException if serialization fails"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/-schema-registry-client/","title":"SchemaRegistryClient","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/SchemaRegistryClient</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/-schema-registry-client/#schemaregistryclient","title":"SchemaRegistryClient","text":"<p>[jvm]\\ class SchemaRegistryClient(providedClient: HttpClient, schemaRegistryUrl: String, timeoutMs: Long)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/-schema-registry-client/#constructors","title":"Constructors","text":"SchemaRegistryClient [jvm]constructor(providedClient: HttpClient, schemaRegistryUrl: String, timeoutMs: Long)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/-schema-registry-client/#properties","title":"Properties","text":"Name Summary client [jvm]val client: HttpClient"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/-schema-registry-client/#functions","title":"Functions","text":"Name Summary registerSchema [jvm]inline fun &lt;T : Any&gt; registerSchema(klass: KClass&lt;out T&gt;, topicName: TopicName, noinline onConflict: () -&gt; Unit = {})Register a schema to the schema registry using ktor client registerSchemas [jvm]inline fun &lt;T : Any&gt; registerSchemas(schemas: MutableMap&lt;KClass&lt;out T&gt;, TopicName&gt;)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/-schema-registry-client/-schema-registry-client/","title":"SchemaRegistryClient","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/SchemaRegistryClient/SchemaRegistryClient</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/-schema-registry-client/-schema-registry-client/#schemaregistryclient","title":"SchemaRegistryClient","text":"<p>[jvm]\\ constructor(providedClient: HttpClient, schemaRegistryUrl: String, timeoutMs: Long)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/-schema-registry-client/client/","title":"client","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/SchemaRegistryClient/client</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/-schema-registry-client/client/#client","title":"client","text":"<p>[jvm]\\ val client: HttpClient</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/-schema-registry-client/register-schema/","title":"registerSchema","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/SchemaRegistryClient/registerSchema</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/-schema-registry-client/register-schema/#registerschema","title":"registerSchema","text":"<p>[jvm]\\ inline fun &lt;T : Any &gt; registerSchema( klass: KClass &lt;out T&gt;, topicName: TopicName, noinline onConflict: () -&gt; Unit = {})</p> <p>Register a schema to the schema registry using ktor client</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/-schema-registry-client/register-schema/#parameters","title":"Parameters","text":"<p>jvm</p> klass the class to register, must be annotated with Serializable topicName the topic name to associate the schema with onConflict the function to run if a schema with the same name already exists, defaults to do"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/-schema-registry-client/register-schemas/","title":"registerSchemas","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/SchemaRegistryClient/registerSchemas</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.kafka.components/-schema-registry-client/register-schemas/#registerschemas","title":"registerSchemas","text":"<p>[jvm]\\ inline fun &lt;T : Any &gt; registerSchemas( schemas: MutableMap &lt;KClass &lt;out T &gt;, TopicName&gt;)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/","title":"io.github.flaxoos.ktor.server.plugins.ratelimiter","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/#types","title":"Types","text":"Name Summary CallVolumeUnit [common]interface CallVolumeUnit RateLimiter [common]abstract class RateLimiter RateLimiterResponse [common]interface RateLimiterResponse RateLimitingConfiguration [common]class RateLimitingConfigurationRate limit plugin configuration. RateLimitingDsl [common]@DslMarkerannotation class RateLimitingDsl"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/#properties","title":"Properties","text":"Name Summary RateLimiting [common]val RateLimiting: RouteScopedPlugin&lt;RateLimitingConfiguration&gt;Rate limiting plugin, apply to route to provide route scoped rate limiting, see RateLimitingConfiguration for details on how to configure"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting/","title":"RateLimiting","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiting</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting/#ratelimiting","title":"RateLimiting","text":"<p>[common]\\ val RateLimiting: RouteScopedPlugin&lt;RateLimitingConfiguration&gt;</p> <p>Rate limiting plugin, apply to route to provide route scoped rate limiting, see RateLimitingConfiguration for details on how to configure</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/","title":"CallVolumeUnit","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/CallVolumeUnit</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/#callvolumeunit","title":"CallVolumeUnit","text":"<p>interface CallVolumeUnit</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/#inheritors","title":"Inheritors","text":"Calls Bytes"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/#types","title":"Types","text":"Name Summary Bytes [common]@JvmInlinevalue class Bytes(val size: Int) : CallVolumeUnitVolume is measured in number of bytes of request Calls [common]open class Calls(val callWeighting: ApplicationCall.() -&gt; Double = { 1.0 }) : CallVolumeUnitVolume is measured in number of calls, with an optional call weighting function to give more weight to a call based on any of it's properties"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/#properties","title":"Properties","text":"Name Summary name [common]abstract val name: String size [common]abstract val size: Int"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/#functions","title":"Functions","text":"Name Summary callSize [common]abstract suspend fun callSize(call: ApplicationCall): DoubleSize of the given call as measured by this unit size [common]open fun size(): DoubleSize as Double"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/call-size/","title":"callSize","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/CallVolumeUnit/callSize</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/call-size/#callsize","title":"callSize","text":"<p>[common]\\ abstract suspend fun callSize(call: ApplicationCall): Double</p> <p>Size of the given call as measured by this unit</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/name/","title":"name","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/CallVolumeUnit/name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/name/#name","title":"name","text":"<p>[common]\\ abstract val name: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/size/","title":"size","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/CallVolumeUnit/size</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/size/#size","title":"size","text":"<p>[common]\\ open fun size(): Double</p> <p>Size as Double</p> <p>[common]\\ abstract val size: Int</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-bytes/","title":"Bytes","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/CallVolumeUnit/Bytes</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-bytes/#bytes","title":"Bytes","text":"<p>[common]\\ @JvmInline</p> <p>value class Bytes(val size: Int) : CallVolumeUnit</p> <p>Volume is measured in number of bytes of request</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-bytes/#constructors","title":"Constructors","text":"Bytes [common]constructor(size: Int)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-bytes/#properties","title":"Properties","text":"Name Summary name [common]open override val name: String size [common]open override val size: Int"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-bytes/#functions","title":"Functions","text":"Name Summary callSize [common]open suspend override fun callSize(call: ApplicationCall): DoubleSize of the given call as measured by this unit size [common]open fun size(): DoubleSize as Double"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-bytes/-bytes/","title":"Bytes","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/CallVolumeUnit/Bytes/Bytes</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-bytes/-bytes/#bytes","title":"Bytes","text":"<p>[common]\\ constructor(size: Int)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-bytes/call-size/","title":"callSize","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/CallVolumeUnit/Bytes/callSize</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-bytes/call-size/#callsize","title":"callSize","text":"<p>[common]\\ open suspend override fun callSize(call: ApplicationCall): Double</p> <p>Size of the given call as measured by this unit</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-bytes/name/","title":"name","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/CallVolumeUnit/Bytes/name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-bytes/name/#name","title":"name","text":"<p>[common]\\ open override val name: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-bytes/size/","title":"size","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/CallVolumeUnit/Bytes/size</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-bytes/size/#size","title":"size","text":"<p>[common]\\ open override val size: Int</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-calls/","title":"Calls","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/CallVolumeUnit/Calls</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-calls/#calls","title":"Calls","text":"<p>[common]\\ open class Calls(val callWeighting: ApplicationCall.() -&gt; Double = { 1.0 }) : CallVolumeUnit</p> <p>Volume is measured in number of calls, with an optional call weighting function to give more weight to a call based on any of it's properties</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-calls/#constructors","title":"Constructors","text":"Calls [common]constructor(callWeighting: ApplicationCall.() -&gt; Double = { 1.0 })"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-calls/#properties","title":"Properties","text":"Name Summary callWeighting [common]val callWeighting: ApplicationCall.() -&gt; Double name [common]open override val name: String size [common]open override val size: Int = 1"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-calls/#functions","title":"Functions","text":"Name Summary callSize [common]open suspend override fun callSize(call: ApplicationCall): DoubleSize of the given call as measured by this unit size [common]open fun size(): DoubleSize as Double"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-calls/-calls/","title":"Calls","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/CallVolumeUnit/Calls/Calls</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-calls/-calls/#calls","title":"Calls","text":"<p>[common]\\ constructor(callWeighting: ApplicationCall.() -&gt; Double = { 1.0 })</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-calls/call-size/","title":"callSize","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/CallVolumeUnit/Calls/callSize</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-calls/call-size/#callsize","title":"callSize","text":"<p>[common]\\ open suspend override fun callSize(call: ApplicationCall): Double</p> <p>Size of the given call as measured by this unit</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-calls/call-weighting/","title":"callWeighting","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/CallVolumeUnit/Calls/callWeighting</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-calls/call-weighting/#callweighting","title":"callWeighting","text":"<p>[common]\\ val callWeighting: ApplicationCall.() -&gt; Double</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-calls/name/","title":"name","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/CallVolumeUnit/Calls/name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-calls/name/#name","title":"name","text":"<p>[common]\\ open override val name: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-calls/size/","title":"size","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/CallVolumeUnit/Calls/size</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-call-volume-unit/-calls/size/#size","title":"size","text":"<p>[common]\\ open override val size: Int = 1</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/","title":"RateLimiter","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiter</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/#ratelimiter","title":"RateLimiter","text":"<p>abstract class RateLimiter</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/#inheritors","title":"Inheritors","text":"Bucket SlidingWindow"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/#constructors","title":"Constructors","text":"RateLimiter [common]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/#properties","title":"Properties","text":"Name Summary callVolumeUnit [common]abstract val callVolumeUnit: CallVolumeUnitIn what unit are calls measured capacity [common]abstract val capacity: IntThe maximum capacity, as measured in CallVolumeUnit.Calls or CallVolumeUnit.Bytes clock [common]open val clock: () -&gt; LongA time provider in milliseconds rate [common]abstract val rate: DurationDesired change over time"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/#functions","title":"Functions","text":"Name Summary id [common]fun ApplicationCall.id(): String tryAccept [common]abstract suspend fun tryAccept(call: ApplicationCall): RateLimiterResponseTry to accept a call"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/-rate-limiter/","title":"RateLimiter","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiter/RateLimiter</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/-rate-limiter/#ratelimiter","title":"RateLimiter","text":"<p>[common]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/call-volume-unit/","title":"callVolumeUnit","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiter/callVolumeUnit</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/call-volume-unit/#callvolumeunit","title":"callVolumeUnit","text":"<p>[common]\\ abstract val callVolumeUnit: CallVolumeUnit</p> <p>In what unit are calls measured</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/capacity/","title":"capacity","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiter/capacity</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/capacity/#capacity","title":"capacity","text":"<p>[common]\\ abstract val capacity: Int</p> <p>The maximum capacity, as measured in CallVolumeUnit.Calls or CallVolumeUnit.Bytes</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/clock/","title":"clock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiter/clock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/clock/#clock","title":"clock","text":"<p>[common]\\ open val clock: () -&gt; Long</p> <p>A time provider in milliseconds</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/id/","title":"id","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiter/id</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/id/#id","title":"id","text":"<p>[common]\\ fun ApplicationCall.id(): String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/rate/","title":"rate","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiter/rate</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/rate/#rate","title":"rate","text":"<p>[common]\\ abstract val rate: Duration</p> <p>Desired change over time</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/try-accept/","title":"tryAccept","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiter/tryAccept</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/try-accept/#tryaccept","title":"tryAccept","text":"<p>[common]\\ abstract suspend fun tryAccept(call: ApplicationCall): RateLimiterResponse</p> <p>Try to accept a call</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/try-accept/#return","title":"Return","text":"<p>response detailing if the call was accepted and details in the case of rejection</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter/try-accept/#parameters","title":"Parameters","text":"<p>common</p> call the call to accept"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/","title":"RateLimiterResponse","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiterResponse</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/#ratelimiterresponse","title":"RateLimiterResponse","text":"<p>interface RateLimiterResponse</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/#inheritors","title":"Inheritors","text":"NotLimited LimitedBy"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/#types","title":"Types","text":"Name Summary LimitedBy [common]data class LimitedBy(val rateLimiter: RateLimiter, val exceededBy: Number, val resetIn: Duration, val message: String) : RateLimiterResponse NotLimited [common]data class NotLimited(val rateLimiter: RateLimiter, val remaining: Number? = null) : RateLimiterResponse"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/#properties","title":"Properties","text":"Name Summary rateLimiter [common]abstract val rateLimiter: RateLimiter"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/rate-limiter/","title":"rateLimiter","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiterResponse/rateLimiter</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/rate-limiter/#ratelimiter","title":"rateLimiter","text":"<p>[common]\\ abstract val rateLimiter: RateLimiter</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-limited-by/","title":"LimitedBy","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiterResponse/LimitedBy</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-limited-by/#limitedby","title":"LimitedBy","text":"<p>[common]\\ data class LimitedBy(val rateLimiter: RateLimiter, val exceededBy: Number, val resetIn: Duration, val message: String) : RateLimiterResponse</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-limited-by/#constructors","title":"Constructors","text":"LimitedBy [common]constructor(rateLimiter: RateLimiter, exceededBy: Number, resetIn: Duration, message: String)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-limited-by/#properties","title":"Properties","text":"Name Summary exceededBy [common]val exceededBy: Number message [common]val message: String rateLimiter [common]open override val rateLimiter: RateLimiter resetIn [common]val resetIn: Duration"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-limited-by/-limited-by/","title":"LimitedBy","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiterResponse/LimitedBy/LimitedBy</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-limited-by/-limited-by/#limitedby","title":"LimitedBy","text":"<p>[common]\\ constructor(rateLimiter: RateLimiter, exceededBy: Number, resetIn: Duration, message: String)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-limited-by/exceeded-by/","title":"exceededBy","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiterResponse/LimitedBy/exceededBy</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-limited-by/exceeded-by/#exceededby","title":"exceededBy","text":"<p>[common]\\ val exceededBy: Number</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-limited-by/message/","title":"message","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiterResponse/LimitedBy/message</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-limited-by/message/#message","title":"message","text":"<p>[common]\\ val message: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-limited-by/rate-limiter/","title":"rateLimiter","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiterResponse/LimitedBy/rateLimiter</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-limited-by/rate-limiter/#ratelimiter","title":"rateLimiter","text":"<p>[common]\\ open override val rateLimiter: RateLimiter</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-limited-by/reset-in/","title":"resetIn","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiterResponse/LimitedBy/resetIn</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-limited-by/reset-in/#resetin","title":"resetIn","text":"<p>[common]\\ val resetIn: Duration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-not-limited/","title":"NotLimited","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiterResponse/NotLimited</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-not-limited/#notlimited","title":"NotLimited","text":"<p>[common]\\ data class NotLimited(val rateLimiter: RateLimiter, val remaining: Number? = null) : RateLimiterResponse</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-not-limited/#constructors","title":"Constructors","text":"NotLimited [common]constructor(rateLimiter: RateLimiter, remaining: Number? = null)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-not-limited/#properties","title":"Properties","text":"Name Summary rateLimiter [common]open override val rateLimiter: RateLimiter remaining [common]val remaining: Number? = null"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-not-limited/-not-limited/","title":"NotLimited","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiterResponse/NotLimited/NotLimited</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-not-limited/-not-limited/#notlimited","title":"NotLimited","text":"<p>[common]\\ constructor(rateLimiter: RateLimiter, remaining: Number? = null)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-not-limited/rate-limiter/","title":"rateLimiter","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiterResponse/NotLimited/rateLimiter</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-not-limited/rate-limiter/#ratelimiter","title":"rateLimiter","text":"<p>[common]\\ open override val rateLimiter: RateLimiter</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-not-limited/remaining/","title":"remaining","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimiterResponse/NotLimited/remaining</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiter-response/-not-limited/remaining/#remaining","title":"remaining","text":"<p>[common]\\ val remaining: Number? = null</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/","title":"RateLimitingConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/#ratelimitingconfiguration","title":"RateLimitingConfiguration","text":"<p>[common]\\ class RateLimitingConfiguration</p> <p>Rate limit plugin configuration.</p> <p>Be careful using whitelisting, as the caller can abuse it by overriding the host or user-agent by manipulating the headers, it is safest to use Principal whitelisting, as it relies on authentication.</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/#constructors","title":"Constructors","text":"RateLimitingConfiguration [common]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/#types","title":"Types","text":"Name Summary RateLimiterConfiguration [common]class RateLimiterConfiguration(var type: KClass&lt;out RateLimiter&gt; = TokenBucket::class, var rate: Duration = INFINITE, var capacity: Int = Int.MAX_VALUE, var clock: () -&gt; Long = { now().toEpochMilliseconds() }, var callVolumeUnit: CallVolumeUnit = CallVolumeUnit.Calls())"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/#properties","title":"Properties","text":"Name Summary blackListedAgents [common]var blackListedAgents: Set&lt;String&gt;Any user-agents that are blacklisted, i.e. will not be allowed through in any case, handled by blackListedCallerCallHandler blackListedCallerCallHandler [common]var blackListedCallerCallHandler: suspend RateLimitingConfiguration.(ApplicationCall) -&gt; UnitThe call handler for blacklisted Callers, use to define the response for blacklisted Callers, default is respond with 403 blackListedHosts [common]var blackListedHosts: Set&lt;String&gt;Any Hosts that are blacklisted, i.e. will not be allowed through in any case, handled by blackListedCallerCallHandler blackListedPrincipals [common]var blackListedPrincipals: Set&lt;Principal&gt;Any Principals that are blacklisted, i.e. will not be allowed through in any case, handled by blackListedCallerCallHandler callAcceptedHandler [common]val callAcceptedHandler: suspend ApplicationCall.(RateLimiterResponse.NotLimited) -&gt; UnitThe call handler for accepted calls, use to define the response for accepted calls, by default, adds appropriate X-RateLimit headers excludePaths [common]var excludePaths: Set&lt;Regex&gt;Regexes for paths to exclude from this rate limiter rateLimitExceededHandler [common]val rateLimitExceededHandler: suspend ApplicationCall.(RateLimiterResponse.LimitedBy) -&gt; UnitThe call handler for rate limited IPs, use to define the response for rate limited IPs. The default is to respond with 429 and appropriate X-RateLimit headers whiteListedAgents [common]var whiteListedAgents: Set&lt;String&gt;Any user-agents that are whitelisted, i.e. will be allowed through without rate limiting whiteListedHosts [common]var whiteListedHosts: Set&lt;String&gt;Any Hosts that are whitelisted, i.e. will be allowed through without rate limiting whiteListedPrincipals [common]var whiteListedPrincipals: Set&lt;Principal&gt;Any Principals that are whitelisted, i.e. will be allowed through without rate limiting"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/#functions","title":"Functions","text":"Name Summary rateLimiter [common]fun rateLimiter(configuration: RateLimitingConfiguration.RateLimiterConfiguration.() -&gt; Unit)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiting-configuration/","title":"RateLimitingConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/RateLimitingConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiting-configuration/#ratelimitingconfiguration","title":"RateLimitingConfiguration","text":"<p>[common]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/black-listed-agents/","title":"blackListedAgents","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/blackListedAgents</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/black-listed-agents/#blacklistedagents","title":"blackListedAgents","text":"<p>[common]\\ var blackListedAgents: Set &lt;String&gt;</p> <p>Any user-agents that are blacklisted, i.e. will not be allowed through in any case, handled by blackListedCallerCallHandler</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/black-listed-caller-call-handler/","title":"blackListedCallerCallHandler","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/blackListedCallerCallHandler</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/black-listed-caller-call-handler/#blacklistedcallercallhandler","title":"blackListedCallerCallHandler","text":"<p>[common]\\ var blackListedCallerCallHandler: suspend RateLimitingConfiguration.( ApplicationCall) -&gt; Unit</p> <p>The call handler for blacklisted Callers, use to define the response for blacklisted Callers, default is respond with 403</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/black-listed-hosts/","title":"blackListedHosts","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/blackListedHosts</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/black-listed-hosts/#blacklistedhosts","title":"blackListedHosts","text":"<p>[common]\\ var blackListedHosts: Set &lt;String&gt;</p> <p>Any Hosts that are blacklisted, i.e. will not be allowed through in any case, handled by blackListedCallerCallHandler</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/black-listed-principals/","title":"blackListedPrincipals","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/blackListedPrincipals</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/black-listed-principals/#blacklistedprincipals","title":"blackListedPrincipals","text":"<p>[common]\\ var blackListedPrincipals: Set &lt;Principal&gt;</p> <p>Any Principals that are blacklisted, i.e. will not be allowed through in any case, handled by blackListedCallerCallHandler</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/call-accepted-handler/","title":"callAcceptedHandler","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/callAcceptedHandler</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/call-accepted-handler/#callacceptedhandler","title":"callAcceptedHandler","text":"<p>[common]\\ val callAcceptedHandler: suspend ApplicationCall.(RateLimiterResponse.NotLimited) -&gt; Unit</p> <p>The call handler for accepted calls, use to define the response for accepted calls, by default, adds appropriate X-RateLimit headers</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/exclude-paths/","title":"excludePaths","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/excludePaths</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/exclude-paths/#excludepaths","title":"excludePaths","text":"<p>[common]\\ var excludePaths: Set &lt;Regex&gt;</p> <p>Regexes for paths to exclude from this rate limiter</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/rate-limit-exceeded-handler/","title":"rateLimitExceededHandler","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/rateLimitExceededHandler</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/rate-limit-exceeded-handler/#ratelimitexceededhandler","title":"rateLimitExceededHandler","text":"<p>[common]\\ val rateLimitExceededHandler: suspend ApplicationCall.(RateLimiterResponse.LimitedBy) -&gt; Unit</p> <p>The call handler for rate limited IPs, use to define the response for rate limited IPs. The default is to respond with 429 and appropriate X-RateLimit headers</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/rate-limiter/","title":"rateLimiter","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/rateLimiter</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/rate-limiter/#ratelimiter","title":"rateLimiter","text":"<p>[common]\\ fun rateLimiter( configuration: RateLimitingConfiguration.RateLimiterConfiguration.() -&gt; Unit)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/white-listed-agents/","title":"whiteListedAgents","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/whiteListedAgents</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/white-listed-agents/#whitelistedagents","title":"whiteListedAgents","text":"<p>[common]\\ var whiteListedAgents: Set &lt;String&gt;</p> <p>Any user-agents that are whitelisted, i.e. will be allowed through without rate limiting</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/white-listed-hosts/","title":"whiteListedHosts","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/whiteListedHosts</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/white-listed-hosts/#whitelistedhosts","title":"whiteListedHosts","text":"<p>[common]\\ var whiteListedHosts: Set &lt;String&gt;</p> <p>Any Hosts that are whitelisted, i.e. will be allowed through without rate limiting</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/white-listed-principals/","title":"whiteListedPrincipals","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/whiteListedPrincipals</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/white-listed-principals/#whitelistedprincipals","title":"whiteListedPrincipals","text":"<p>[common]\\ var whiteListedPrincipals: Set &lt;Principal&gt;</p> <p>Any Principals that are whitelisted, i.e. will be allowed through without rate limiting</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/","title":"RateLimiterConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/RateLimiterConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/#ratelimiterconfiguration","title":"RateLimiterConfiguration","text":"<p>[common]\\ class RateLimiterConfiguration(var type: KClass &lt;out RateLimiter&gt; = TokenBucket::class, var rate: Duration = INFINITE, var capacity: Int = Int.MAX_VALUE, var clock: () -&gt; Long = { now().toEpochMilliseconds() }, var callVolumeUnit: CallVolumeUnit = CallVolumeUnit.Calls())</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/#constructors","title":"Constructors","text":"RateLimiterConfiguration [common]constructor(type: KClass&lt;out RateLimiter&gt; = TokenBucket::class, rate: Duration = INFINITE, capacity: Int = Int.MAX_VALUE, clock: () -&gt; Long = { now().toEpochMilliseconds() }, callVolumeUnit: CallVolumeUnit = CallVolumeUnit.Calls())"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/#properties","title":"Properties","text":"Name Summary callVolumeUnit [common]var callVolumeUnit: CallVolumeUnitThe unit by which the rate limiter capacity is measured, not applicable for LeakyBucket capacity [common]var capacity: IntThe rate limiter capacity clock [common]var clock: () -&gt; LongA time provider in milliseconds rate [common]var rate: DurationThe rate limiter rate type [common]var type: KClass&lt;out RateLimiter&gt;The rate limiter implementation"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/-rate-limiter-configuration/","title":"RateLimiterConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/RateLimiterConfiguration/RateLimiterConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/-rate-limiter-configuration/#ratelimiterconfiguration","title":"RateLimiterConfiguration","text":"<p>[common]\\ constructor(type: KClass &lt;out RateLimiter&gt; = TokenBucket::class, rate: Duration = INFINITE, capacity: Int = Int.MAX_VALUE, clock: () -&gt; Long = { now().toEpochMilliseconds() }, callVolumeUnit: CallVolumeUnit = CallVolumeUnit.Calls())</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/call-volume-unit/","title":"callVolumeUnit","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/RateLimiterConfiguration/callVolumeUnit</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/call-volume-unit/#callvolumeunit","title":"callVolumeUnit","text":"<p>[common]\\ var callVolumeUnit: CallVolumeUnit</p> <p>The unit by which the rate limiter capacity is measured, not applicable for LeakyBucket</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/capacity/","title":"capacity","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/RateLimiterConfiguration/capacity</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/capacity/#capacity","title":"capacity","text":"<p>[common]\\ var capacity: Int</p> <p>The rate limiter capacity</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/clock/","title":"clock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/RateLimiterConfiguration/clock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/clock/#clock","title":"clock","text":"<p>[common]\\ var clock: () -&gt; Long</p> <p>A time provider in milliseconds</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/rate/","title":"rate","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/RateLimiterConfiguration/rate</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/rate/#rate","title":"rate","text":"<p>[common]\\ var rate: Duration</p> <p>The rate limiter rate</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/type/","title":"type","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingConfiguration/RateLimiterConfiguration/type</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-configuration/-rate-limiter-configuration/type/#type","title":"type","text":"<p>[common]\\ var type: KClass &lt;out RateLimiter&gt;</p> <p>The rate limiter implementation</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-dsl/","title":"RateLimitingDsl","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/RateLimitingDsl</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter/-rate-limiting-dsl/#ratelimitingdsl","title":"RateLimitingDsl","text":"<p>[common]\\ @DslMarker</p> <p>annotation class RateLimitingDsl</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/","title":"io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/#types","title":"Types","text":"Name Summary Bucket [common]sealed class Bucket : RateLimiter ConcurrentFixedSizeWeightedQueue [common]class ConcurrentFixedSizeWeightedQueue&lt;T&gt;(maxWeight: Int)A fixed size queue of weighted entries with safe access LeakyBucket [common]class LeakyBucket(log: KLogger = logger, val rate: Duration, val capacity: Int, val clock: () -&gt; Long = { Clock.System.now().toEpochMilliseconds() }) : BucketLeaky Bucket, allows for constant rate of delivery, Fair distribution between clients, but not ideal for handling bursts SlidingWindow [common]data class SlidingWindow(val rate: Duration, val capacity: Int, val callVolumeUnit: CallVolumeUnit, val clock: () -&gt; Long = { now().toEpochMilliseconds() }) : RateLimiterSliding window, allows a given weight of calls to be made over a given duration. TokenBucket [common]class TokenBucket(log: KLogger = logger, val rate: Duration, val callVolumeUnit: CallVolumeUnit = CallVolumeUnit.Calls(), val capacity: Int, val clock: () -&gt; Long = { Clock.System.now().toEpochMilliseconds() }) : BucketToken Bucket, allows varying rate of delivery, Better for handling bursts, but can be exploited by malicious clients to consume all the capacity at once."},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-bucket/","title":"Bucket","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/Bucket</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-bucket/#bucket","title":"Bucket","text":"<p>sealed class Bucket : RateLimiter</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-bucket/#inheritors","title":"Inheritors","text":"LeakyBucket TokenBucket"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-bucket/#properties","title":"Properties","text":"Name Summary callVolumeUnit [common]abstract val callVolumeUnit: CallVolumeUnitIn what unit are calls measured capacity [common]override val capacity: IntThe maximum capacity, as measured in CallVolumeUnit.Calls or CallVolumeUnit.Bytes clock [common]override val clock: () -&gt; LongA time provider in milliseconds rate [common]abstract val rate: DurationDesired change over time"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-bucket/#functions","title":"Functions","text":"Name Summary id [common]fun ApplicationCall.id(): String tryAccept [common]abstract suspend fun tryAccept(call: ApplicationCall): RateLimiterResponseTry to accept a call"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-bucket/capacity/","title":"capacity","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/Bucket/capacity</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-bucket/capacity/#capacity","title":"capacity","text":"<p>[common]\\ override val capacity: Int</p> <p>The maximum capacity, as measured in CallVolumeUnit.Calls or CallVolumeUnit.Bytes</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-bucket/clock/","title":"clock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/Bucket/clock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-bucket/clock/#clock","title":"clock","text":"<p>[common]\\ override val clock: () -&gt; Long</p> <p>A time provider in milliseconds</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-concurrent-fixed-size-weighted-queue/","title":"ConcurrentFixedSizeWeightedQueue","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/ConcurrentFixedSizeWeightedQueue</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-concurrent-fixed-size-weighted-queue/#concurrentfixedsizeweightedqueue","title":"ConcurrentFixedSizeWeightedQueue","text":"<p>[common]\\ class ConcurrentFixedSizeWeightedQueue&lt;T&gt;( maxWeight: Int)</p> <p>A fixed size queue of weighted entries with safe access</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-concurrent-fixed-size-weighted-queue/#constructors","title":"Constructors","text":"ConcurrentFixedSizeWeightedQueue [common]constructor(maxWeight: Int)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-concurrent-fixed-size-weighted-queue/#functions","title":"Functions","text":"Name Summary peekNext [common]fun peekNext(): Pair&lt;T, Double&gt;? toString [common]open override fun toString(): String trimWhere [common]fun trimWhere(comparison: (T) -&gt; Int): MutableList&lt;Pair&lt;T, Double&gt;&gt;? tryAdd [common]fun tryAdd(t: T, weight: Double = 1.0): Boolean"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-concurrent-fixed-size-weighted-queue/-concurrent-fixed-size-weighted-queue/","title":"ConcurrentFixedSizeWeightedQueue","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/ConcurrentFixedSizeWeightedQueue/ConcurrentFixedSizeWeightedQueue</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-concurrent-fixed-size-weighted-queue/-concurrent-fixed-size-weighted-queue/#concurrentfixedsizeweightedqueue","title":"ConcurrentFixedSizeWeightedQueue","text":"<p>[common]\\ constructor(maxWeight: Int)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-concurrent-fixed-size-weighted-queue/peek-next/","title":"peekNext","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/ConcurrentFixedSizeWeightedQueue/peekNext</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-concurrent-fixed-size-weighted-queue/peek-next/#peeknext","title":"peekNext","text":"<p>[common]\\ fun peekNext(): Pair &lt;T, Double&gt;?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-concurrent-fixed-size-weighted-queue/to-string/","title":"toString","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/ConcurrentFixedSizeWeightedQueue/toString</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-concurrent-fixed-size-weighted-queue/to-string/#tostring","title":"toString","text":"<p>[common]\\ open override fun toString(): String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-concurrent-fixed-size-weighted-queue/trim-where/","title":"trimWhere","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/ConcurrentFixedSizeWeightedQueue/trimWhere</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-concurrent-fixed-size-weighted-queue/trim-where/#trimwhere","title":"trimWhere","text":"<p>[common]\\ fun trimWhere(comparison: (T) -&gt; Int): MutableList &lt;Pair &lt;T, Double&gt;&gt;?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-concurrent-fixed-size-weighted-queue/try-add/","title":"tryAdd","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/ConcurrentFixedSizeWeightedQueue/tryAdd</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-concurrent-fixed-size-weighted-queue/try-add/#tryadd","title":"tryAdd","text":"<p>[common]\\ fun tryAdd(t: T, weight: Double = 1.0): Boolean</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-leaky-bucket/","title":"LeakyBucket","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/LeakyBucket</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-leaky-bucket/#leakybucket","title":"LeakyBucket","text":"<p>[common]\\ class LeakyBucket(log: KLogger = logger, val rate: Duration, val capacity: Int, val clock: () -&gt; Long = { Clock.System.now() .toEpochMilliseconds() }) : Bucket</p> <p>Leaky Bucket, allows for constant rate of delivery, Fair distribution between clients, but not ideal for handling bursts</p> <p>The configured rate will be the rate in which requests will leak from the bucket, when not empty. This means the call will be suspended until it leaks out of the bucket, at which point the tryAccept function would return. No timeout is set, so the call can be suspended indefinitely in theory, and it is up to the server or client to implement a timeout.</p> <p>CallVolumeUnit is always Calls with weighting of 1.0.</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-leaky-bucket/#constructors","title":"Constructors","text":"LeakyBucket [common]constructor(log: KLogger = logger, rate: Duration, capacity: Int, clock: () -&gt; Long = { Clock.System.now().toEpochMilliseconds() })"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-leaky-bucket/#properties","title":"Properties","text":"Name Summary callVolumeUnit [common]open override val callVolumeUnit: CallVolumeUnitIn what unit are calls measured capacity [common]override val capacity: IntThe maximum capacity, as measured in CallVolumeUnit.Calls or CallVolumeUnit.Bytes clock [common]override val clock: () -&gt; LongA time provider in milliseconds rate [common]open override val rate: DurationDesired change over time"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-leaky-bucket/#functions","title":"Functions","text":"Name Summary id [common]fun ApplicationCall.id(): String tryAccept [common]open suspend override fun tryAccept(call: ApplicationCall): RateLimiterResponseTry to accept a call"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-leaky-bucket/-leaky-bucket/","title":"LeakyBucket","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/LeakyBucket/LeakyBucket</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-leaky-bucket/-leaky-bucket/#leakybucket","title":"LeakyBucket","text":"<p>[common]\\ constructor(log: KLogger = logger, rate: Duration, capacity: Int, clock: () -&gt; Long = { Clock.System.now() .toEpochMilliseconds() })</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-leaky-bucket/call-volume-unit/","title":"callVolumeUnit","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/LeakyBucket/callVolumeUnit</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-leaky-bucket/call-volume-unit/#callvolumeunit","title":"callVolumeUnit","text":"<p>[common]\\ open override val callVolumeUnit: CallVolumeUnit</p> <p>In what unit are calls measured</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-leaky-bucket/rate/","title":"rate","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/LeakyBucket/rate</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-leaky-bucket/rate/#rate","title":"rate","text":"<p>[common]\\ open override val rate: Duration</p> <p>Desired change over time</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-leaky-bucket/try-accept/","title":"tryAccept","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/LeakyBucket/tryAccept</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-leaky-bucket/try-accept/#tryaccept","title":"tryAccept","text":"<p>[common]\\ open suspend override fun tryAccept(call: ApplicationCall): RateLimiterResponse</p> <p>Try to accept a call</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-leaky-bucket/try-accept/#return","title":"Return","text":"<p>response detailing if the call was accepted and details in the case of rejection</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-leaky-bucket/try-accept/#parameters","title":"Parameters","text":"<p>common</p> call the call to accept"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/","title":"SlidingWindow","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/SlidingWindow</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/#slidingwindow","title":"SlidingWindow","text":"<p>[common]\\ data class SlidingWindow(val rate: Duration, val capacity: Int, val callVolumeUnit: CallVolumeUnit, val clock: () -&gt; Long = { now() .toEpochMilliseconds() }) : RateLimiter</p> <p>Sliding window, allows a given weight of calls to be made over a given duration.</p> <p>The configured rate will be the time window over which the calls will be counted. The call weight is defined by the callVolumeUnit</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/#constructors","title":"Constructors","text":"SlidingWindow [common]constructor(rate: Duration, capacity: Int, callVolumeUnit: CallVolumeUnit, clock: () -&gt; Long = { now().toEpochMilliseconds() })"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/#properties","title":"Properties","text":"Name Summary callVolumeUnit [common]open override val callVolumeUnit: CallVolumeUnitIn what unit are calls measured capacity [common]open override val capacity: IntThe maximum capacity, as measured in CallVolumeUnit.Calls or CallVolumeUnit.Bytes clock [common]open override val clock: () -&gt; LongA time provider rate [common]open override val rate: DurationDesired change over time"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/#functions","title":"Functions","text":"Name Summary id [common]fun ApplicationCall.id(): String tryAccept [common]open suspend override fun tryAccept(call: ApplicationCall): RateLimiterResponseTry to accept a call"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/-sliding-window/","title":"SlidingWindow","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/SlidingWindow/SlidingWindow</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/-sliding-window/#slidingwindow","title":"SlidingWindow","text":"<p>[common]\\ constructor(rate: Duration, capacity: Int, callVolumeUnit: CallVolumeUnit, clock: () -&gt; Long = { now() .toEpochMilliseconds() })</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/call-volume-unit/","title":"callVolumeUnit","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/SlidingWindow/callVolumeUnit</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/call-volume-unit/#callvolumeunit","title":"callVolumeUnit","text":"<p>[common]\\ open override val callVolumeUnit: CallVolumeUnit</p> <p>In what unit are calls measured</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/capacity/","title":"capacity","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/SlidingWindow/capacity</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/capacity/#capacity","title":"capacity","text":"<p>[common]\\ open override val capacity: Int</p> <p>The maximum capacity, as measured in CallVolumeUnit.Calls or CallVolumeUnit.Bytes</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/clock/","title":"clock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/SlidingWindow/clock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/clock/#clock","title":"clock","text":"<p>[common]\\ open override val clock: () -&gt; Long</p> <p>A time provider</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/rate/","title":"rate","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/SlidingWindow/rate</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/rate/#rate","title":"rate","text":"<p>[common]\\ open override val rate: Duration</p> <p>Desired change over time</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/try-accept/","title":"tryAccept","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/SlidingWindow/tryAccept</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/try-accept/#tryaccept","title":"tryAccept","text":"<p>[common]\\ open suspend override fun tryAccept(call: ApplicationCall): RateLimiterResponse</p> <p>Try to accept a call</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/try-accept/#return","title":"Return","text":"<p>response detailing if the call was accepted and details in the case of rejection</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-sliding-window/try-accept/#parameters","title":"Parameters","text":"<p>common</p> call the call to accept"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-token-bucket/","title":"TokenBucket","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/TokenBucket</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-token-bucket/#tokenbucket","title":"TokenBucket","text":"<p>[common]\\ class TokenBucket(log: KLogger = logger, val rate: Duration, val callVolumeUnit: CallVolumeUnit = CallVolumeUnit.Calls(), val capacity: Int, val clock: () -&gt; Long = { Clock.System.now() .toEpochMilliseconds() }) : Bucket</p> <p>Token Bucket, allows varying rate of delivery, Better for handling bursts, but can be exploited by malicious clients to consume all the capacity at once.</p> <p>The configured Bucket.rate will be the rate at which tokens will be added to the bucket, until full.</p> <p>CallVolumeUnit can be CallVolumeUnit.Calls with optional call weight factor, or CallVolumeUnit.Bytes, specifying how many bytes to add at every refill</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-token-bucket/#constructors","title":"Constructors","text":"TokenBucket [common]constructor(log: KLogger = logger, rate: Duration, callVolumeUnit: CallVolumeUnit = CallVolumeUnit.Calls(), capacity: Int, clock: () -&gt; Long = { Clock.System.now().toEpochMilliseconds() })"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-token-bucket/#properties","title":"Properties","text":"Name Summary callVolumeUnit [common]open override val callVolumeUnit: CallVolumeUnitThe token to be added at every refill, can be CallVolumeUnit.Calls with optional call weight factor, or CallVolumeUnit.Bytes, specifying how many bytes to add at every refill capacity [common]override val capacity: IntThe maximum capacity, as measured in CallVolumeUnit.Calls or CallVolumeUnit.Bytes clock [common]override val clock: () -&gt; LongA time provider in milliseconds rate [common]open override val rate: DurationAt what rate should token be added to the bucket"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-token-bucket/#functions","title":"Functions","text":"Name Summary id [common]fun ApplicationCall.id(): String tryAccept [common]open suspend override fun tryAccept(call: ApplicationCall): RateLimiterResponseTry to accept a call"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-token-bucket/-token-bucket/","title":"TokenBucket","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/TokenBucket/TokenBucket</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-token-bucket/-token-bucket/#tokenbucket","title":"TokenBucket","text":"<p>[common]\\ constructor(log: KLogger = logger, rate: Duration, callVolumeUnit: CallVolumeUnit = CallVolumeUnit.Calls(), capacity: Int, clock: () -&gt; Long = { Clock.System.now() .toEpochMilliseconds() })</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-token-bucket/call-volume-unit/","title":"callVolumeUnit","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/TokenBucket/callVolumeUnit</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-token-bucket/call-volume-unit/#callvolumeunit","title":"callVolumeUnit","text":"<p>[common]\\ open override val callVolumeUnit: CallVolumeUnit</p> <p>The token to be added at every refill, can be CallVolumeUnit.Calls with optional call weight factor, or CallVolumeUnit.Bytes, specifying how many bytes to add at every refill</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-token-bucket/rate/","title":"rate","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/TokenBucket/rate</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-token-bucket/rate/#rate","title":"rate","text":"<p>[common]\\ open override val rate: Duration</p> <p>At what rate should token be added to the bucket</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-token-bucket/try-accept/","title":"tryAccept","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/TokenBucket/tryAccept</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-token-bucket/try-accept/#tryaccept","title":"tryAccept","text":"<p>[common]\\ open suspend override fun tryAccept(call: ApplicationCall): RateLimiterResponse</p> <p>Try to accept a call</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-token-bucket/try-accept/#return","title":"Return","text":"<p>response detailing if the call was accepted and details in the case of rejection</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.ratelimiter.implementations/-token-bucket/try-accept/#parameters","title":"Parameters","text":"<p>common</p> call the call to accept"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/","title":"io.github.flaxoos.ktor.server.plugins.taskscheduling","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/#types","title":"Types","text":"Name Summary TaskConfiguration [common]class TaskConfigurationConfiguration for a Task TaskFreqMs [jvm]@JvmInlinevalue class TaskFreqMs(val value: Long) TaskSchedulingConfiguration [common]open class TaskSchedulingConfigurationConfiguration for TaskScheduling TaskSchedulingDsl [common]@DslMarkerannotation class TaskSchedulingDsl TaskSchedulingPluginTest [jvm]abstract class TaskSchedulingPluginTest : FunSpec"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/#properties","title":"Properties","text":"Name Summary logger [jvm]val logger: KLogger TaskScheduling [common]val TaskScheduling: ApplicationPlugin&lt;TaskSchedulingConfiguration&gt;Task scheduler plugin"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling/","title":"TaskScheduling","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskScheduling</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling/#taskscheduling","title":"TaskScheduling","text":"<p>[common]\\ val TaskScheduling: ApplicationPlugin&lt;TaskSchedulingConfiguration&gt;</p> <p>Task scheduler plugin</p> <p>Provides scheduling capabilities for a given set of scheduled tasks. The tasks are managed by some implementation of TaskManager, that is responsible for coordinating the execution of the tasks across the different instances of the application.</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/logger/","title":"logger","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/logger</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/logger/#logger","title":"logger","text":"<p>[jvm]\\ val logger: KLogger</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/","title":"TaskConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/#taskconfiguration","title":"TaskConfiguration","text":"<p>[common]\\ class TaskConfiguration</p> <p>Configuration for a Task</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/#constructors","title":"Constructors","text":"TaskConfiguration [common]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/#properties","title":"Properties","text":"Name Summary concurrency [common]var concurrency: IntHow many instances of the task should be fired at the same time dispatcher [common]var dispatcher: CoroutineDispatcher?What dispatcher should be used to execute the task, if none is provided, the application's dispatcher will be used kronSchedule [common]var kronSchedule: SchedulerBuilder.() -&gt; Unit?The kronSchedule for the task name [common]var name: StringThe name of the task, should be unique, as it id used to identify the task task [common]var task: suspend Application.(DateTime) -&gt; UnitThe actual task logic"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/-task-configuration/","title":"TaskConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskConfiguration/TaskConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/-task-configuration/#taskconfiguration","title":"TaskConfiguration","text":"<p>[common]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/concurrency/","title":"concurrency","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskConfiguration/concurrency</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/concurrency/#concurrency","title":"concurrency","text":"<p>[common]\\ var concurrency: Int</p> <p>How many instances of the task should be fired at the same time</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/dispatcher/","title":"dispatcher","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskConfiguration/dispatcher</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/dispatcher/#dispatcher","title":"dispatcher","text":"<p>[common]\\ var dispatcher: CoroutineDispatcher?</p> <p>What dispatcher should be used to execute the task, if none is provided, the application's dispatcher will be used</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/kron-schedule/","title":"kronSchedule","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskConfiguration/kronSchedule</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/kron-schedule/#kronschedule","title":"kronSchedule","text":"<p>[common]\\ var kronSchedule: SchedulerBuilder.() -&gt; Unit?</p> <p>The kronSchedule for the task</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/name/","title":"name","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskConfiguration/name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/name/#name","title":"name","text":"<p>[common]\\ var name: String</p> <p>The name of the task, should be unique, as it id used to identify the task</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/task/","title":"task","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskConfiguration/task</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-configuration/task/#task","title":"task","text":"<p>[common]\\ var task: suspend Application.(DateTime) -&gt; Unit</p> <p>The actual task logic</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-freq-ms/","title":"TaskFreqMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskFreqMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-freq-ms/#taskfreqms","title":"TaskFreqMs","text":"<p>[jvm]\\ @JvmInline</p> <p>value class TaskFreqMs(val value: Long)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-freq-ms/#constructors","title":"Constructors","text":"TaskFreqMs [jvm]constructor(value: Long)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-freq-ms/#properties","title":"Properties","text":"Name Summary value [jvm]val value: Long"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-freq-ms/-task-freq-ms/","title":"TaskFreqMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskFreqMs/TaskFreqMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-freq-ms/-task-freq-ms/#taskfreqms","title":"TaskFreqMs","text":"<p>[jvm]\\ constructor(value: Long)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-freq-ms/value/","title":"value","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskFreqMs/value</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-freq-ms/value/#value","title":"value","text":"<p>[jvm]\\ val value: Long</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-configuration/","title":"TaskSchedulingConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskSchedulingConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-configuration/#taskschedulingconfiguration","title":"TaskSchedulingConfiguration","text":"<p>[common]\\ open class TaskSchedulingConfiguration</p> <p>Configuration for TaskScheduling</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-configuration/#constructors","title":"Constructors","text":"TaskSchedulingConfiguration [common]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-configuration/#functions","title":"Functions","text":"Name Summary addTaskManager [common]fun addTaskManager(taskManagerConfiguration: TaskManagerConfiguration&lt;*&gt;) jdbc [jvm]fun TaskSchedulingConfiguration.jdbc(name: String? = null, config: JdbcJobLockManagerConfiguration.() -&gt; Unit)Add a JdbcLockManager mongoDb [jvm]fun TaskSchedulingConfiguration.mongoDb(name: String? = null, config: MongoDBJobLockManagerConfiguration.() -&gt; Unit)Add a MongoDBLockManager redis [common]fun TaskSchedulingConfiguration.redis(name: String? = null, config: RedisTaskLockManagerConfiguration.() -&gt; Unit)Add a RedisLockManager task [common]fun task(taskManagerName: String? = null, taskConfiguration: TaskConfiguration.() -&gt; Unit)Add a task to be managed by a TaskManager with the given name or the default one if no name is provided and a default task manager has been configured"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-configuration/-task-scheduling-configuration/","title":"TaskSchedulingConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskSchedulingConfiguration/TaskSchedulingConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-configuration/-task-scheduling-configuration/#taskschedulingconfiguration","title":"TaskSchedulingConfiguration","text":"<p>[common]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-configuration/add-task-manager/","title":"addTaskManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskSchedulingConfiguration/addTaskManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-configuration/add-task-manager/#addtaskmanager","title":"addTaskManager","text":"<p>[common]\\ fun addTaskManager( taskManagerConfiguration: TaskManagerConfiguration &lt;*&gt;)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-configuration/task/","title":"task","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskSchedulingConfiguration/task</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-configuration/task/#task","title":"task","text":"<p>[common]\\ fun task(taskManagerName: String? = null, taskConfiguration: TaskConfiguration.() -&gt; Unit)</p> <p>Add a task to be managed by a TaskManager with the given name or the default one if no name is provided and a default task manager has been configured</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-dsl/","title":"TaskSchedulingDsl","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskSchedulingDsl</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-dsl/#taskschedulingdsl","title":"TaskSchedulingDsl","text":"<p>[common]\\ @DslMarker</p> <p>annotation class TaskSchedulingDsl</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-plugin-test/","title":"TaskSchedulingPluginTest","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskSchedulingPluginTest</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-plugin-test/#taskschedulingplugintest","title":"TaskSchedulingPluginTest","text":"<p>[jvm]\\ abstract class TaskSchedulingPluginTest : FunSpec</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-plugin-test/#constructors","title":"Constructors","text":"TaskSchedulingPluginTest [jvm]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-plugin-test/#properties","title":"Properties","text":"Name Summary assertions [jvm]var assertions: AssertionMode? assertSoftly [jvm]var assertSoftly: Boolean? blockingTest [jvm]var blockingTest: Boolean? concurrency [jvm]var concurrency: Int? coroutineDebugProbes [jvm]var coroutineDebugProbes: Boolean? coroutineDispatcherFactory [jvm]var coroutineDispatcherFactory: CoroutineDispatcherFactory? coroutineTestScope [jvm]var coroutineTestScope: Boolean? defaultTestConfig [jvm]var ~~defaultTestConfig~~: TestCaseConfig? dispatcherAffinity [jvm]var dispatcherAffinity: Boolean? duplicateTestNameMode [jvm]var duplicateTestNameMode: DuplicateTestNameMode? failfast [jvm]var failfast: Boolean? invocationTimeout [jvm]var invocationTimeout: Long? isolationMode [jvm]var isolationMode: IsolationMode? severity [jvm]var severity: TestCaseSeverityLevel? testCoroutineDispatcher [jvm]var ~~testCoroutineDispatcher~~: Boolean? testOrder [jvm]var testOrder: TestCaseOrder? threads [jvm]var threads: Int? timeout [jvm]var timeout: Long?"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-plugin-test/#functions","title":"Functions","text":"Name Summary add [jvm]open override fun add(test: RootTest) afterAny [jvm]fun afterAny(f: suspend (Tuple2&lt;TestCase, TestResult&gt;) -&gt; Unit)open suspend fun afterAny(testCase: TestCase, result: TestResult) afterContainer [jvm]fun afterContainer(f: suspend (Tuple2&lt;TestCase, TestResult&gt;) -&gt; Unit)open suspend fun afterContainer(testCase: TestCase, result: TestResult) afterEach [jvm]fun afterEach(f: suspend (Tuple2&lt;TestCase, TestResult&gt;) -&gt; Unit)open suspend fun afterEach(testCase: TestCase, result: TestResult) afterProject [jvm]fun afterProject(f: AfterProject) afterSpec [jvm]open suspend fun afterSpec(spec: Spec)open override fun afterSpec(f: suspend (Spec) -&gt; Unit) afterTest [jvm]open override fun afterTest(f: suspend (Tuple2&lt;TestCase, TestResult&gt;) -&gt; Unit)open suspend fun afterTest(testCase: TestCase, result: TestResult) appliedTags [jvm]fun appliedTags(): Set&lt;Tag&gt; aroundSpec [jvm]fun ~~aroundSpec~~(aroundSpecFn: suspend (Tuple2&lt;KClass&lt;out Spec&gt;, suspend () -&gt; Unit&gt;) -&gt; Unit) aroundTest [jvm]fun aroundTest(aroundTestFn: suspend (Tuple2&lt;TestCase, suspend (TestCase) -&gt; TestResult&gt;) -&gt; TestResult) assertionMode [jvm]open fun assertionMode(): AssertionMode? autoClose [jvm]fun &lt;T : AutoCloseable&gt; autoClose(closeable: T): Tfun &lt;T : AutoCloseable&gt; autoClose(closeable: Lazy&lt;T&gt;): Lazy&lt;T&gt; beforeAny [jvm]fun beforeAny(f: suspend (TestCase) -&gt; Unit)open suspend fun beforeAny(testCase: TestCase) beforeContainer [jvm]fun beforeContainer(f: suspend (TestCase) -&gt; Unit)open suspend fun beforeContainer(testCase: TestCase) beforeEach [jvm]fun beforeEach(f: suspend (TestCase) -&gt; Unit)open suspend fun beforeEach(testCase: TestCase) beforeSpec [jvm]fun beforeSpec(f: suspend (Spec) -&gt; Unit)open suspend fun beforeSpec(spec: Spec) beforeTest [jvm]open suspend fun beforeTest(testCase: TestCase)open override fun beforeTest(f: suspend (TestCase) -&gt; Unit) concurrency [jvm]open fun concurrency(): Int? context [jvm]open fun context(name: String): RootContainerWithConfigBuilder&lt;FunSpecContainerScope&gt;open fun context(name: String, test: suspend FunSpecContainerScope.() -&gt; Unit) coroutineDispatcherFactory [jvm]open fun coroutineDispatcherFactory(): CoroutineDispatcherFactory? defaultTestCaseConfig [jvm]open fun ~~defaultTestCaseConfig~~(): TestCaseConfig? dispatcherAffinity [jvm]open fun dispatcherAffinity(): Boolean? extension [jvm]fun &lt;T : Extension&gt; extension(extension: T): Tfun extension(f: suspend (Tuple2&lt;TestCase, suspend (TestCase) -&gt; TestResult&gt;) -&gt; TestResult) extensions [jvm]fun extensions(vararg extensions: Extension)fun extensions(extensions: List&lt;Extension&gt;)open fun extensions(): List&lt;Extension&gt; finalizeSpec [jvm]fun finalizeSpec(f: suspend (Tuple2&lt;KClass&lt;out Spec&gt;, Map&lt;TestCase, TestResult&gt;&gt;) -&gt; Unit) globalExtensions [jvm]open override fun globalExtensions(): List&lt;Extension&gt; include [jvm]fun include(factory: TestFactory)fun include(prefix: String, factory: TestFactory) invocationTimeout [jvm]open fun invocationTimeout(): Long? isolationMode [jvm]open fun isolationMode(): IsolationMode? listener [jvm]fun &lt;T : TestListener&gt; listener(listener: T): T listeners [jvm]fun listeners(vararg listeners: TestListener)fun listeners(listeners: List&lt;TestListener&gt;)open fun listeners(): List&lt;TestListener&gt; register [jvm]fun &lt;T : TestListener&gt; register(extension: T): Tfun register(vararg extensions: Extension)fun register(extensions: List&lt;Extension&gt;) registeredAutoCloseables [jvm]fun registeredAutoCloseables(): List&lt;Lazy&lt;AutoCloseable&gt;&gt; registeredExtensions [jvm]fun registeredExtensions(): List&lt;Extension&gt; rootTests [jvm]open override fun rootTests(): List&lt;RootTest&gt; seal [jvm]fun seal() tags [jvm]fun tags(vararg tags: Tag)open fun tags(): Set&lt;Tag&gt; test [jvm]open fun test(name: String): RootTestWithConfigBuilderopen fun test(name: String, test: suspend TestScope.() -&gt; Unit) testCaseOrder [jvm]open fun testCaseOrder(): TestCaseOrder? testTaskScheduling [jvm]suspend fun ContainerScope.testTaskScheduling(engineCount: Int = ENGINE_COUNT, executions: Int = EXECUTIONS, executionBufferMs: Int = DEFAULT_EXECUTION_BUFFER_MS, frequenciesExponentialSeriesInitialMs: Short = FREQUENCIES_EXPONENTIAL_SERIES_INITIAL_MS, frequenciesExponentialSeriesN: Short = FREQUENCIES_EXPONENTIAL_SERIES_N, taskSchedulingConfiguration: TaskSchedulingConfiguration.(TaskFreqMs) -&gt; Unit) threads [jvm]open fun threads(): Int? timeout [jvm]open fun timeout(): Long? xcontext [jvm]open fun xcontext(name: String): RootContainerWithConfigBuilder&lt;FunSpecContainerScope&gt;open fun xcontext(name: String, test: suspend FunSpecContainerScope.() -&gt; Unit) xtest [jvm]open fun xtest(name: String): RootTestWithConfigBuilderopen fun xtest(name: String, test: suspend TestScope.() -&gt; Unit)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-plugin-test/-task-scheduling-plugin-test/","title":"TaskSchedulingPluginTest","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskSchedulingPluginTest/TaskSchedulingPluginTest</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-plugin-test/-task-scheduling-plugin-test/#taskschedulingplugintest","title":"TaskSchedulingPluginTest","text":"<p>[jvm]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-plugin-test/test-task-scheduling/","title":"testTaskScheduling","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/TaskSchedulingPluginTest/testTaskScheduling</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling/-task-scheduling-plugin-test/test-task-scheduling/#testtaskscheduling","title":"testTaskScheduling","text":"<p>[jvm]\\ suspend fun ContainerScope.testTaskScheduling( engineCount: Int = ENGINE_COUNT, executions: Int = EXECUTIONS, executionBufferMs: Int = DEFAULT_EXECUTION_BUFFER_MS, frequenciesExponentialSeriesInitialMs: Short = FREQUENCIES_EXPONENTIAL_SERIES_INITIAL_MS, frequenciesExponentialSeriesN: Short = FREQUENCIES_EXPONENTIAL_SERIES_N, taskSchedulingConfiguration: TaskSchedulingConfiguration.(TaskFreqMs) -&gt; Unit)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/","title":"io.github.flaxoos.ktor.server.plugins.taskscheduling.managers","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/#types","title":"Types","text":"Name Summary TaskExecutionToken [common]interface TaskExecutionTokenRepresents a token that can be used to grant permission to execute a task TaskManager [common]abstract class TaskManager&lt;TASK_EXECUTION_TOKEN : TaskExecutionToken&gt; : Closeable TaskManagerConfiguration [common]abstract class TaskManagerConfiguration&lt;TASK_EXECUTION_TOKEN&gt;Configuration for TaskManager"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-execution-token/","title":"TaskExecutionToken","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskExecutionToken</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-execution-token/#taskexecutiontoken","title":"TaskExecutionToken","text":"<p>interface TaskExecutionToken</p> <p>Represents a token that can be used to grant permission to execute a task</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-execution-token/#inheritors","title":"Inheritors","text":"TaskLock"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-execution-token/#properties","title":"Properties","text":"Name Summary concurrencyIndex [common]abstract val concurrencyIndex: Int name [common]abstract val name: String"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-execution-token/concurrency-index/","title":"concurrencyIndex","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskExecutionToken/concurrencyIndex</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-execution-token/concurrency-index/#concurrencyindex","title":"concurrencyIndex","text":"<p>[common]\\ abstract val concurrencyIndex: Int</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-execution-token/name/","title":"name","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskExecutionToken/name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-execution-token/name/#name","title":"name","text":"<p>[common]\\ abstract val name: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/","title":"TaskManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/#taskmanager","title":"TaskManager","text":"<p>abstract class TaskManager &lt;TASK_EXECUTION_TOKEN : TaskExecutionToken&gt; : Closeable</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/#inheritors","title":"Inheritors","text":"TaskLockManager"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/#constructors","title":"Constructors","text":"TaskManager [common]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/#properties","title":"Properties","text":"Name Summary application [common]abstract val application: Application name [common]abstract val name: TaskManagerConfiguration.TaskManagerName"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/#functions","title":"Functions","text":"Name Summary attemptExecute [common]abstract suspend fun attemptExecute(task: Task, executionTime: DateTime, concurrencyIndex: Int): TASK_EXECUTION_TOKEN?Try executing the given task at the given execution time with the given concurrency index close [common]expect abstract fun close() init [common]abstract suspend fun init(tasks: List&lt;Task&gt;)Initialize the TaskManager with the given tasks it manages markExecuted [common]abstract suspend fun markExecuted(key: TASK_EXECUTION_TOKEN)Mark this task as, provided a key was acquired"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/-task-manager/","title":"TaskManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManager/TaskManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/-task-manager/#taskmanager","title":"TaskManager","text":"<p>[common]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/application/","title":"application","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManager/application</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/application/#application","title":"application","text":"<p>[common]\\ abstract val application: Application</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/attempt-execute/","title":"attemptExecute","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManager/attemptExecute</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/attempt-execute/#attemptexecute","title":"attemptExecute","text":"<p>[common]\\ abstract suspend fun attemptExecute( task: Task, executionTime: DateTime, concurrencyIndex: Int): TASK_EXECUTION_TOKEN?</p> <p>Try executing the given task at the given execution time with the given concurrency index</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/init/","title":"init","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManager/init</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/init/#init","title":"init","text":"<p>[common]\\ abstract suspend fun init( tasks: List &lt;Task&gt;)</p> <p>Initialize the TaskManager with the given tasks it manages</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/mark-executed/","title":"markExecuted","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManager/markExecuted</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/mark-executed/#markexecuted","title":"markExecuted","text":"<p>[common]\\ abstract suspend fun markExecuted(key: TASK_EXECUTION_TOKEN)</p> <p>Mark this task as, provided a key was acquired</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/name/","title":"name","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManager/name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/name/#name","title":"name","text":"<p>[common]\\ abstract val name: TaskManagerConfiguration.TaskManagerName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/-companion/","title":"Companion","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManager/Companion</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/-companion/#functions","title":"Functions","text":"Name Summary format2 [common]fun DateTime.format2(): String format2ToDateTime [common]fun String.format2ToDateTime(): DateTime host [common]fun Application.host(): String"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/-companion/format2-to-date-time/","title":"format2ToDateTime","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManager/Companion/format2ToDateTime</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/-companion/format2-to-date-time/#format2todatetime","title":"format2ToDateTime","text":"<p>[common]\\ fun String.format2ToDateTime(): DateTime</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/-companion/format2/","title":"format2","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManager/Companion/format2</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/-companion/format2/#format2","title":"format2","text":"<p>[common]\\ fun DateTime.format2(): String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/-companion/host/","title":"host","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManager/Companion/host</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager/-companion/host/#host","title":"host","text":"<p>[common]\\ fun Application.host(): String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/","title":"TaskManagerConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManagerConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/#taskmanagerconfiguration","title":"TaskManagerConfiguration","text":"<p>abstract class TaskManagerConfiguration&lt;TASK_EXECUTION_TOKEN&gt;</p> <p>Configuration for TaskManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/#inheritors","title":"Inheritors","text":"TaskLockManagerConfiguration"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/#constructors","title":"Constructors","text":"TaskManagerConfiguration [common]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/#types","title":"Types","text":"Name Summary TaskManagerName [common]@JvmInlinevalue class TaskManagerName(val value: String)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/#properties","title":"Properties","text":"Name Summary name [common]var name: String?The name of the task manager, will be used to identify the task manager when assigning tasks to it if none is provided, it will be considered the default one. only one default task manager is allowed."},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/#functions","title":"Functions","text":"Name Summary createTaskManager [common]abstract fun createTaskManager(application: Application): TaskManager&lt;out TaskExecutionToken&gt;Create the TaskManager that this configuration is for"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-configuration/","title":"TaskManagerConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManagerConfiguration/TaskManagerConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-configuration/#taskmanagerconfiguration","title":"TaskManagerConfiguration","text":"<p>[common]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/create-task-manager/","title":"createTaskManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManagerConfiguration/createTaskManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/create-task-manager/#createtaskmanager","title":"createTaskManager","text":"<p>[common]\\ abstract fun createTaskManager(application: Application): TaskManager&lt;out TaskExecutionToken &gt;</p> <p>Create the TaskManager that this configuration is for</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/name/","title":"name","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManagerConfiguration/name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/name/#name","title":"name","text":"<p>[common]\\ var name: String?</p> <p>The name of the task manager, will be used to identify the task manager when assigning tasks to it if none is provided, it will be considered the default one. only one default task manager is allowed.</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-name/","title":"TaskManagerName","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManagerConfiguration/TaskManagerName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-name/#taskmanagername","title":"TaskManagerName","text":"<p>[common]\\ @JvmInline</p> <p>value class TaskManagerName(val value: String)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-name/#constructors","title":"Constructors","text":"TaskManagerName [common]constructor(value: String)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-name/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-name/#properties","title":"Properties","text":"Name Summary value [common]val value: String"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-name/-task-manager-name/","title":"TaskManagerName","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManagerConfiguration/TaskManagerName/TaskManagerName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-name/-task-manager-name/#taskmanagername","title":"TaskManagerName","text":"<p>[common]\\ constructor(value: String)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-name/value/","title":"value","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManagerConfiguration/TaskManagerName/value</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-name/value/#value","title":"value","text":"<p>[common]\\ val value: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-name/-companion/","title":"Companion","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManagerConfiguration/TaskManagerName/Companion</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-name/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-name/-companion/#functions","title":"Functions","text":"Name Summary toTaskManagerName [common]fun String?.toTaskManagerName(): TaskManagerConfiguration.TaskManagerName"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-name/-companion/to-task-manager-name/","title":"toTaskManagerName","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/TaskManagerConfiguration/TaskManagerName/Companion/toTaskManagerName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers/-task-manager-configuration/-task-manager-name/-companion/to-task-manager-name/#totaskmanagername","title":"toTaskManagerName","text":"<p>[common]\\ fun String?.toTaskManagerName(): TaskManagerConfiguration.TaskManagerName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/","title":"io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/#types","title":"Types","text":"Name Summary TaskLockManager [common]abstract class TaskLockManager&lt;TASK_LOCK : TaskLock&gt; : TaskManager&lt;TASK_LOCK&gt; TaskLockManagerConfiguration [common]abstract class TaskLockManagerConfiguration&lt;TASK_LOCK&gt; : TaskManagerConfiguration&lt;TASK_LOCK&gt;"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager/","title":"TaskLockManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/TaskLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager/#tasklockmanager","title":"TaskLockManager","text":"<p>abstract class TaskLockManager &lt;TASK_LOCK : TaskLock &gt; : TaskManager &lt;TASK_LOCK&gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager/#inheritors","title":"Inheritors","text":"DatabaseTaskLockManager RedisLockManager"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager/#constructors","title":"Constructors","text":"TaskLockManager [common]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager/#properties","title":"Properties","text":"Name Summary application [common]abstract val application: Application name [common]abstract val name: TaskManagerConfiguration.TaskManagerName"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager/#functions","title":"Functions","text":"Name Summary acquireLockKey [common]abstract suspend fun acquireLockKey(task: Task, executionTime: DateTime, concurrencyIndex: Int): TASK_LOCK?Get permission to execute the task attemptExecute [common]open suspend override fun attemptExecute(task: Task, executionTime: DateTime, concurrencyIndex: Int): TASK_LOCK?Try executing the given task at the given execution time with the given concurrency index close [common]expect abstract fun close() init [common]abstract suspend fun init(tasks: List&lt;Task&gt;)Initialize the TaskManager with the given tasks it manages markExecuted [common]open suspend override fun markExecuted(key: TASK_LOCK)Mark this task as, provided a key was acquired"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager/-task-lock-manager/","title":"TaskLockManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/TaskLockManager/TaskLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager/-task-lock-manager/#tasklockmanager","title":"TaskLockManager","text":"<p>[common]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager/acquire-lock-key/","title":"acquireLockKey","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/TaskLockManager/acquireLockKey</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager/acquire-lock-key/#acquirelockkey","title":"acquireLockKey","text":"<p>[common]\\ abstract suspend fun acquireLockKey( task: Task, executionTime: DateTime, concurrencyIndex: Int): TASK_LOCK?</p> <p>Get permission to execute the task</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager/attempt-execute/","title":"attemptExecute","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/TaskLockManager/attemptExecute</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager/attempt-execute/#attemptexecute","title":"attemptExecute","text":"<p>[common]\\ open suspend override fun attemptExecute( task: Task, executionTime: DateTime, concurrencyIndex: Int): TASK_LOCK?</p> <p>Try executing the given task at the given execution time with the given concurrency index</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager/mark-executed/","title":"markExecuted","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/TaskLockManager/markExecuted</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager/mark-executed/#markexecuted","title":"markExecuted","text":"<p>[common]\\ open suspend override fun markExecuted(key: TASK_LOCK)</p> <p>Mark this task as, provided a key was acquired</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager-configuration/","title":"TaskLockManagerConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/TaskLockManagerConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager-configuration/#tasklockmanagerconfiguration","title":"TaskLockManagerConfiguration","text":"<p>abstract class TaskLockManagerConfiguration&lt;TASK_LOCK &gt; : TaskManagerConfiguration &lt;TASK_LOCK&gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager-configuration/#inheritors","title":"Inheritors","text":"DatabaseTaskLockManagerConfiguration RedisTaskLockManagerConfiguration"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager-configuration/#constructors","title":"Constructors","text":"TaskLockManagerConfiguration [common]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager-configuration/#properties","title":"Properties","text":"Name Summary name [common]var name: String?The name of the task manager, will be used to identify the task manager when assigning tasks to it if none is provided, it will be considered the default one. only one default task manager is allowed."},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager-configuration/#functions","title":"Functions","text":"Name Summary createTaskManager [common]abstract fun createTaskManager(application: Application): TaskManager&lt;out TaskExecutionToken&gt;Create the TaskManager that this configuration is for"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager-configuration/-task-lock-manager-configuration/","title":"TaskLockManagerConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/TaskLockManagerConfiguration/TaskLockManagerConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock/-task-lock-manager-configuration/-task-lock-manager-configuration/#tasklockmanagerconfiguration","title":"TaskLockManagerConfiguration","text":"<p>[common]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/","title":"io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/#types","title":"Types","text":"Name Summary DatabaseTaskLock [common]interface DatabaseTaskLock : TaskLock DatabaseTaskLockManager [common]abstract class DatabaseTaskLockManager&lt;DB_TASK_LOCK_KEY : DatabaseTaskLock&gt; : TaskLockManager&lt;DB_TASK_LOCK_KEY&gt; An abstract implementation of TaskLockManager using a database as the lock store DatabaseTaskLockManagerConfiguration [common]abstract class DatabaseTaskLockManagerConfiguration&lt;DB_TASK_LOCK_KEY : DatabaseTaskLock&gt; : TaskLockManagerConfiguration&lt;DB_TASK_LOCK_KEY&gt; ExposedTaskLockTable [jvm]abstract class ExposedTaskLockTable(tableName: String) : Table JdbcJobLockManagerConfiguration [jvm]class JdbcJobLockManagerConfiguration : DatabaseTaskLockManagerConfiguration&lt;JdbcTaskLock&gt; JdbcLockManager [jvm]class JdbcLockManager(val name: TaskManagerConfiguration.TaskManagerName, val application: Application, database: Database, taskLockTable: ExposedTaskLockTable = DefaultTaskLockTable) : DatabaseTaskLockManager&lt;JdbcTaskLock&gt; An implementation of DatabaseTaskLockManager using JDBC and Exposed as the lock store The manager will take care of generating the lock table using the SchemaUtils and the DefaultTaskLockTable. the schema utils should handle the case where the table already exists. TODO: test this Alternatively, you can use implement the ExposedTaskLockTable yourself and provide it instead JdbcTaskLock [jvm]class JdbcTaskLock(val name: String, val concurrencyIndex: Int, val lockedAt: DateTime) : DatabaseTaskLock MongoDBJobLockManagerConfiguration [jvm]class MongoDBJobLockManagerConfiguration : DatabaseTaskLockManagerConfiguration&lt;MongoDbTaskLock&gt; MongoDBLockManager [jvm]class MongoDBLockManager(val name: TaskManagerConfiguration.TaskManagerName, val application: Application, client: MongoClient, databaseName: String) : DatabaseTaskLockManager&lt;MongoDbTaskLock&gt; An implementation of DatabaseTaskLockManager using MongoDB as the lock store MongoDbTaskLock [jvm]data class MongoDbTaskLock(val name: String, val concurrencyIndex: Int, var lockedAt: DateTime) : DatabaseTaskLock"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/#functions","title":"Functions","text":"Name Summary jdbc [jvm]fun TaskSchedulingConfiguration.jdbc(name: String? = null, config: JdbcJobLockManagerConfiguration.() -&gt; Unit)Add a JdbcLockManager mongoDb [jvm]fun TaskSchedulingConfiguration.mongoDb(name: String? = null, config: MongoDBJobLockManagerConfiguration.() -&gt; Unit)Add a MongoDBLockManager"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/jdbc/","title":"jdbc","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/jdbc</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/jdbc/#jdbc","title":"jdbc","text":"<p>[jvm]\\ fun TaskSchedulingConfiguration.jdbc( name: String? = null, config: JdbcJobLockManagerConfiguration.() -&gt; Unit)</p> <p>Add a JdbcLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/mongo-db/","title":"mongoDb","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/mongoDb</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/mongo-db/#mongodb","title":"mongoDb","text":"<p>[jvm]\\ fun TaskSchedulingConfiguration.mongoDb( name: String? = null, config: MongoDBJobLockManagerConfiguration.() -&gt; Unit)</p> <p>Add a MongoDBLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock/","title":"DatabaseTaskLock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/DatabaseTaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock/#databasetasklock","title":"DatabaseTaskLock","text":"<p>interface DatabaseTaskLock : TaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock/#inheritors","title":"Inheritors","text":"JdbcTaskLock MongoDbTaskLock"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock/#properties","title":"Properties","text":"Name Summary concurrencyIndex [common]abstract val concurrencyIndex: Int lockedAt [common]abstract val lockedAt: DateTime name [common]abstract val name: String"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock/locked-at/","title":"lockedAt","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/DatabaseTaskLock/lockedAt</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock/locked-at/#lockedat","title":"lockedAt","text":"<p>[common]\\ abstract val lockedAt: DateTime</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/","title":"DatabaseTaskLockManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/DatabaseTaskLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/#databasetasklockmanager","title":"DatabaseTaskLockManager","text":"<p>abstract class DatabaseTaskLockManager &lt;DB_TASK_LOCK_KEY : DatabaseTaskLock &gt; : TaskLockManager &lt;DB_TASK_LOCK_KEY&gt;</p> <p>An abstract implementation of TaskLockManager using a database as the lock store</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/#inheritors","title":"Inheritors","text":"JdbcLockManager MongoDBLockManager"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/#constructors","title":"Constructors","text":"DatabaseTaskLockManager [common]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/#properties","title":"Properties","text":"Name Summary application [common]abstract val application: Application name [common]abstract val name: TaskManagerConfiguration.TaskManagerName"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/#functions","title":"Functions","text":"Name Summary acquireLockKey [common]suspend override fun acquireLockKey(task: Task, executionTime: DateTime, concurrencyIndex: Int): DB_TASK_LOCK_KEY?Get permission to execute the task attemptExecute [common]open suspend override fun attemptExecute(task: Task, executionTime: DateTime, concurrencyIndex: Int): DB_TASK_LOCK_KEY?Try executing the given task at the given execution time with the given concurrency index close [common]expect abstract fun close() init [common]suspend override fun init(tasks: List&lt;Task&gt;)Initialize the TaskManager with the given tasks it manages initTaskLockTable [common]abstract suspend fun initTaskLockTable()Create the task lock key table in the database insertTaskLock [common]abstract suspend fun insertTaskLock(task: Task, taskConcurrencyIndex: Int): BooleanInsert a new task lock key into the database markExecuted [common]open suspend override fun markExecuted(key: DB_TASK_LOCK_KEY)Mark this task as, provided a key was acquired updateTaskLock [common]abstract suspend fun updateTaskLock(task: Task, concurrencyIndex: Int, executionTime: DateTime): DB_TASK_LOCK_KEY?Try to update the task lock entry in the database, where the key is the combination of task name and concurrency index and execution time different from the given execution time, returning the updated entry or null if none was updated"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/-database-task-lock-manager/","title":"DatabaseTaskLockManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/DatabaseTaskLockManager/DatabaseTaskLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/-database-task-lock-manager/#databasetasklockmanager","title":"DatabaseTaskLockManager","text":"<p>[common]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/acquire-lock-key/","title":"acquireLockKey","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/DatabaseTaskLockManager/acquireLockKey</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/acquire-lock-key/#acquirelockkey","title":"acquireLockKey","text":"<p>[common]\\ suspend override fun acquireLockKey( task: Task, executionTime: DateTime, concurrencyIndex: Int): DB_TASK_LOCK_KEY?</p> <p>Get permission to execute the task</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/init-task-lock-table/","title":"initTaskLockTable","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/DatabaseTaskLockManager/initTaskLockTable</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/init-task-lock-table/#inittasklocktable","title":"initTaskLockTable","text":"<p>[common]\\ abstract suspend fun initTaskLockTable()</p> <p>Create the task lock key table in the database</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/init/","title":"init","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/DatabaseTaskLockManager/init</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/init/#init","title":"init","text":"<p>[common]\\ suspend override fun init( tasks: List &lt;Task&gt;)</p> <p>Initialize the TaskManager with the given tasks it manages</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/insert-task-lock/","title":"insertTaskLock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/DatabaseTaskLockManager/insertTaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/insert-task-lock/#inserttasklock","title":"insertTaskLock","text":"<p>[common]\\ abstract suspend fun insertTaskLock( task: Task, taskConcurrencyIndex: Int): Boolean</p> <p>Insert a new task lock key into the database</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/update-task-lock/","title":"updateTaskLock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/DatabaseTaskLockManager/updateTaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager/update-task-lock/#updatetasklock","title":"updateTaskLock","text":"<p>[common]\\ abstract suspend fun updateTaskLock( task: Task, concurrencyIndex: Int, executionTime: DateTime): DB_TASK_LOCK_KEY?</p> <p>Try to update the task lock entry in the database, where the key is the combination of task name and concurrency index and execution time different from the given execution time, returning the updated entry or null if none was updated</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager-configuration/","title":"DatabaseTaskLockManagerConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/DatabaseTaskLockManagerConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager-configuration/#databasetasklockmanagerconfiguration","title":"DatabaseTaskLockManagerConfiguration","text":"<p>abstract class DatabaseTaskLockManagerConfiguration &lt;DB_TASK_LOCK_KEY : DatabaseTaskLock &gt; : TaskLockManagerConfiguration &lt;DB_TASK_LOCK_KEY&gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager-configuration/#inheritors","title":"Inheritors","text":"JdbcJobLockManagerConfiguration MongoDBJobLockManagerConfiguration"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager-configuration/#constructors","title":"Constructors","text":"DatabaseTaskLockManagerConfiguration [common]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager-configuration/#properties","title":"Properties","text":"Name Summary name [common]var name: String?The name of the task manager, will be used to identify the task manager when assigning tasks to it if none is provided, it will be considered the default one. only one default task manager is allowed."},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager-configuration/#functions","title":"Functions","text":"Name Summary createTaskManager [common]abstract fun createTaskManager(application: Application): TaskManager&lt;out TaskExecutionToken&gt;Create the TaskManager that this configuration is for"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager-configuration/-database-task-lock-manager-configuration/","title":"DatabaseTaskLockManagerConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/DatabaseTaskLockManagerConfiguration/DatabaseTaskLockManagerConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-database-task-lock-manager-configuration/-database-task-lock-manager-configuration/#databasetasklockmanagerconfiguration","title":"DatabaseTaskLockManagerConfiguration","text":"<p>[common]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-exposed-task-lock-table/","title":"ExposedTaskLockTable","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/ExposedTaskLockTable</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-exposed-task-lock-table/#exposedtasklocktable","title":"ExposedTaskLockTable","text":"<p>[jvm]\\ abstract class ExposedTaskLockTable( tableName: String) : Table</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-exposed-task-lock-table/#constructors","title":"Constructors","text":"ExposedTaskLockTable [jvm]constructor(tableName: String)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-exposed-task-lock-table/#properties","title":"Properties","text":"Name Summary autoIncColumn [jvm]val autoIncColumn: Column&lt;*&gt;? columns [jvm]open override val columns: List&lt;Column&lt;*&gt;&gt; concurrencyIndex [jvm]abstract val concurrencyIndex: Column&lt;Int&gt; ddl [jvm]val ddl: List&lt;String&gt; fields [jvm]open override val fields: List&lt;Expression&lt;*&gt;&gt; foreignKeys [jvm]val foreignKeys: List&lt;ForeignKeyConstraint&gt; indices [jvm]val indices: List&lt;Index&gt; lockedAt [jvm]abstract val lockedAt: Column&lt;Instant&gt; name [jvm]abstract val name: Column&lt;String&gt; primaryKey [jvm]open val primaryKey: Table.PrimaryKey? realFields [jvm]open val realFields: List&lt;Expression&lt;*&gt;&gt; schemaName [jvm]val schemaName: String? source [jvm]open override val source: ColumnSet tableName [jvm]open val tableName: String"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-exposed-task-lock-table/#functions","title":"Functions","text":"Name Summary autoGenerate [jvm]fun Column&lt;UUID&gt;.autoGenerate(): Column&lt;UUID&gt; autoinc [jvm]fun &lt;N : Comparable&lt;N&gt;&gt; Column&lt;EntityID&lt;N&gt;&gt;.autoinc(idSeqName: String?): Column&lt;EntityID&lt;N&gt;&gt; autoIncrement [jvm]fun &lt;N : Any&gt; Column&lt;N&gt;.autoIncrement(idSeqName: String?): Column&lt;N&gt; binary [jvm]fun binary(name: String): Column&lt;ByteArray&gt;fun binary(name: String, length: Int): Column&lt;ByteArray&gt; blob [jvm]fun blob(name: String): Column&lt;ExposedBlob&gt; bool [jvm]fun bool(name: String): Column&lt;Boolean&gt; byte [jvm]fun byte(name: String): Column&lt;Byte&gt; char [jvm]fun char(name: String): Column&lt;Char&gt;fun char(name: String, length: Int, collate: String?): Column&lt;String&gt; check [jvm]fun check(name: String, op: SqlExpressionBuilder.() -&gt; Op&lt;Boolean&gt;) check [jvm]fun &lt;T&gt; Column&lt;T&gt;.check(name: String, op: SqlExpressionBuilder.(Column&lt;T&gt;) -&gt; Op&lt;Boolean&gt;): Column&lt;T&gt; clientDefault [jvm]fun &lt;T&gt; Column&lt;T&gt;.clientDefault(defaultValue: () -&gt; T): Column&lt;T&gt; createStatement [jvm]open override fun createStatement(): List&lt;String&gt; crossJoin [jvm]open infix override fun crossJoin(otherTable: ColumnSet): Join customEnumeration [jvm]fun &lt;T : Enum&lt;T&gt;&gt; customEnumeration(name: String, sql: String?, fromDb: (Any) -&gt; T, toDb: (T) -&gt; Any): Column&lt;T&gt; databaseGenerated [jvm]fun &lt;T&gt; Column&lt;T&gt;.databaseGenerated(): Column&lt;T&gt; decimal [jvm]fun decimal(name: String, precision: Int, scale: Int): Column&lt;BigDecimal&gt; default [jvm]fun &lt;T&gt; Column&lt;T&gt;.default(defaultValue: T): Column&lt;T&gt;fun &lt;T&gt; CompositeColumn&lt;T&gt;.default(defaultValue: T): CompositeColumn&lt;T&gt; defaultExpression [jvm]fun &lt;T&gt; Column&lt;T&gt;.defaultExpression(defaultValue: Expression&lt;T&gt;): Column&lt;T&gt; describe [jvm]open override fun describe(s: Transaction, queryBuilder: QueryBuilder) double [jvm]fun double(name: String): Column&lt;Double&gt; dropStatement [jvm]open override fun dropStatement(): List&lt;String&gt; entityId [jvm]fun &lt;ID : Comparable&lt;ID&gt;&gt; entityId(name: String, table: IdTable&lt;ID&gt;): Column&lt;EntityID&lt;ID&gt;&gt;fun &lt;ID : Comparable&lt;ID&gt;&gt; entityId(name: String, originalColumn: Column&lt;ID&gt;): Column&lt;EntityID&lt;ID&gt;&gt; entityId [jvm]fun &lt;T : Comparable&lt;T&gt;&gt; Column&lt;T&gt;.entityId(): Column&lt;EntityID&lt;T&gt;&gt; enumeration [jvm]inline fun &lt;T : Enum&lt;T&gt;&gt; enumeration(name: String): Column&lt;T&gt;fun &lt;T : Enum&lt;T&gt;&gt; enumeration(name: String, klass: KClass&lt;T&gt;): Column&lt;T&gt; enumerationByName [jvm]inline fun &lt;T : Enum&lt;T&gt;&gt; enumerationByName(name: String, length: Int): Column&lt;T&gt;fun &lt;T : Enum&lt;T&gt;&gt; enumerationByName(name: String, length: Int, klass: KClass&lt;T&gt;): Column&lt;T&gt; equals [jvm]open operator override fun equals(other: Any?): Boolean float [jvm]fun float(name: String): Column&lt;Float&gt; foreignKey [jvm]fun foreignKey(vararg references: Pair&lt;Column&lt;&gt;, Column&lt;&gt;&gt;, onUpdate: ReferenceOption?, onDelete: ReferenceOption?, name: String?)fun foreignKey(vararg from: Column&lt;*&gt;, target: Table.PrimaryKey, onUpdate: ReferenceOption?, onDelete: ReferenceOption?, name: String?) fullJoin [jvm]open infix override fun fullJoin(otherTable: ColumnSet): Join hashCode [jvm]open override fun hashCode(): Int index [jvm]fun index(isUnique: Boolean, vararg columns: Column&lt;&gt;)fun index(customIndexName: String?, isUnique: Boolean, vararg columns: Column&lt;&gt;, functions: List&lt;ExpressionWithColumnType&lt;*&gt;&gt;?, indexType: String?, filterCondition: FilterCondition) index [jvm]fun &lt;T&gt; Column&lt;T&gt;.index(customIndexName: String?, isUnique: Boolean): Column&lt;T&gt; innerJoin [jvm]open infix override fun innerJoin(otherTable: ColumnSet): Join integer [jvm]fun integer(name: String): Column&lt;Int&gt; join [jvm]open override fun join(otherTable: ColumnSet, joinType: JoinType, onColumn: Expression&lt;&gt;?, otherColumn: Expression&lt;&gt;?, additionalConstraint: SqlExpressionBuilder.() -&gt; Op&lt;Boolean&gt;?): Join largeText [jvm]fun largeText(name: String, collate: String?, eagerLoading: Boolean): Column&lt;String&gt; leftJoin [jvm]open infix override fun leftJoin(otherTable: ColumnSet): Join long [jvm]fun long(name: String): Column&lt;Long&gt; mediumText [jvm]fun mediumText(name: String, collate: String?, eagerLoading: Boolean): Column&lt;String&gt; modifyStatement [jvm]open override fun modifyStatement(): List&lt;String&gt; nameInDatabaseCase [jvm]fun nameInDatabaseCase(): String nameInDatabaseCaseUnquoted [jvm]fun nameInDatabaseCaseUnquoted(): String nullable [jvm]fun &lt;T : Any, C : CompositeColumn&lt;T&gt;&gt; C.nullable(): CompositeColumn&lt;T?&gt;fun &lt;T : Any&gt; Column&lt;T&gt;.nullable(): Column&lt;T?&gt; optReference [jvm]fun &lt;T : Comparable&lt;T&gt;&gt; optReference(name: String, foreign: IdTable&lt;T&gt;, onDelete: ReferenceOption?, onUpdate: ReferenceOption?, fkName: String?): Column&lt;EntityID&lt;T&gt;?&gt;fun &lt;T : Comparable&lt;T&gt;&gt; optReference(name: String, refColumn: Column&lt;T&gt;, onDelete: ReferenceOption?, onUpdate: ReferenceOption?, fkName: String?): Column&lt;T?&gt;fun &lt;T : Comparable&lt;T&gt;, E : EntityID&lt;T&gt;&gt; optReference(name: String, refColumn: Column&lt;E&gt;, onDelete: ReferenceOption?, onUpdate: ReferenceOption?, fkName: String?): Column&lt;E?&gt; reference [jvm]fun &lt;T : Comparable&lt;T&gt;&gt; reference(name: String, foreign: IdTable&lt;T&gt;, onDelete: ReferenceOption?, onUpdate: ReferenceOption?, fkName: String?): Column&lt;EntityID&lt;T&gt;&gt;fun &lt;T : Comparable&lt;T&gt;&gt; reference(name: String, refColumn: Column&lt;T&gt;, onDelete: ReferenceOption?, onUpdate: ReferenceOption?, fkName: String?): Column&lt;T&gt;fun &lt;T : Comparable&lt;T&gt;, E : EntityID&lt;T&gt;&gt; reference(name: String, refColumn: Column&lt;E&gt;, onDelete: ReferenceOption?, onUpdate: ReferenceOption?, fkName: String?): Column&lt;E&gt; references [jvm]infix fun &lt;T : Comparable&lt;T&gt;, S : T, C : Column&lt;S&gt;&gt; C.references(ref: Column&lt;T&gt;): Cfun &lt;T : Comparable&lt;T&gt;, S : T, C : Column&lt;S&gt;&gt; C.references(ref: Column&lt;T&gt;, onDelete: ReferenceOption?, onUpdate: ReferenceOption?, fkName: String?): Cfun &lt;T : Comparable&lt;T&gt;, S : T, C : Column&lt;S&gt;&gt; C.references(ref: Column&lt;EntityID&lt;T&gt;&gt;, onDelete: ReferenceOption?, onUpdate: ReferenceOption?, fkName: String?): C registerColumn [jvm]fun &lt;T&gt; registerColumn(name: String, type: IColumnType): Column&lt;T&gt; registerCompositeColumn [jvm]fun &lt;R, T : CompositeColumn&lt;R&gt;&gt; registerCompositeColumn(column: T): T replaceColumn [jvm]fun &lt;TColumn : Column&lt;&gt;&gt; replaceColumn(oldColumn: Column&lt;&gt;, newColumn: TColumn): TColumn rightJoin [jvm]open infix override fun rightJoin(otherTable: ColumnSet): Join short [jvm]fun short(name: String): Column&lt;Short&gt; slice [jvm]fun slice(columns: List&lt;Expression&lt;&gt;&gt;): FieldSetfun slice(column: Expression&lt;&gt;, vararg columns: Expression&lt;*&gt;): FieldSet text [jvm]fun text(name: String, collate: String?, eagerLoading: Boolean): Column&lt;String&gt; ubyte [jvm]fun ubyte(name: String): Column&lt;UByte&gt; uinteger [jvm]fun uinteger(name: String): Column&lt;UInt&gt; ulong [jvm]fun ulong(name: String): Column&lt;ULong&gt; uniqueIndex [jvm]fun uniqueIndex(vararg columns: Column&lt;&gt;, filterCondition: FilterCondition)fun uniqueIndex(customIndexName: String?, vararg columns: Column&lt;&gt;, functions: List&lt;ExpressionWithColumnType&lt;*&gt;&gt;?, filterCondition: FilterCondition) uniqueIndex [jvm]fun &lt;T&gt; Column&lt;T&gt;.uniqueIndex(customIndexName: String?): Column&lt;T&gt; ushort [jvm]fun ushort(name: String): Column&lt;UShort&gt; uuid [jvm]fun uuid(name: String): Column&lt;UUID&gt; varchar [jvm]fun varchar(name: String, length: Int, collate: String?): Column&lt;String&gt;"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-exposed-task-lock-table/-exposed-task-lock-table/","title":"ExposedTaskLockTable","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/ExposedTaskLockTable/ExposedTaskLockTable</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-exposed-task-lock-table/-exposed-task-lock-table/#exposedtasklocktable","title":"ExposedTaskLockTable","text":"<p>[jvm]\\ constructor(tableName: String)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-exposed-task-lock-table/concurrency-index/","title":"concurrencyIndex","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/ExposedTaskLockTable/concurrencyIndex</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-exposed-task-lock-table/concurrency-index/#concurrencyindex","title":"concurrencyIndex","text":"<p>[jvm]\\ abstract val concurrencyIndex: Column&lt;Int&gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-exposed-task-lock-table/locked-at/","title":"lockedAt","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/ExposedTaskLockTable/lockedAt</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-exposed-task-lock-table/locked-at/#lockedat","title":"lockedAt","text":"<p>[jvm]\\ abstract val lockedAt: Column&lt;Instant&gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-exposed-task-lock-table/name/","title":"name","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/ExposedTaskLockTable/name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-exposed-task-lock-table/name/#name","title":"name","text":"<p>[jvm]\\ abstract val name: Column&lt;String &gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-job-lock-manager-configuration/","title":"JdbcJobLockManagerConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcJobLockManagerConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-job-lock-manager-configuration/#jdbcjoblockmanagerconfiguration","title":"JdbcJobLockManagerConfiguration","text":"<p>[jvm]\\ class JdbcJobLockManagerConfiguration : DatabaseTaskLockManagerConfiguration &lt;JdbcTaskLock&gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-job-lock-manager-configuration/#constructors","title":"Constructors","text":"JdbcJobLockManagerConfiguration [jvm]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-job-lock-manager-configuration/#properties","title":"Properties","text":"Name Summary database [jvm]var database: Database name [jvm]var name: String?"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-job-lock-manager-configuration/#functions","title":"Functions","text":"Name Summary createTaskManager [jvm]open override fun createTaskManager(application: Application): JdbcLockManager"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-job-lock-manager-configuration/-jdbc-job-lock-manager-configuration/","title":"JdbcJobLockManagerConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcJobLockManagerConfiguration/JdbcJobLockManagerConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-job-lock-manager-configuration/-jdbc-job-lock-manager-configuration/#jdbcjoblockmanagerconfiguration","title":"JdbcJobLockManagerConfiguration","text":"<p>[jvm]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-job-lock-manager-configuration/create-task-manager/","title":"createTaskManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcJobLockManagerConfiguration/createTaskManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-job-lock-manager-configuration/create-task-manager/#createtaskmanager","title":"createTaskManager","text":"<p>[jvm]\\ open override fun createTaskManager(application: Application): JdbcLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-job-lock-manager-configuration/database/","title":"database","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcJobLockManagerConfiguration/database</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-job-lock-manager-configuration/database/#database","title":"database","text":"<p>[jvm]\\ var database: Database</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/","title":"JdbcLockManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/#jdbclockmanager","title":"JdbcLockManager","text":"<p>[jvm]\\ class JdbcLockManager(val name: TaskManagerConfiguration.TaskManagerName, val application: Application, database: Database, taskLockTable: ExposedTaskLockTable = DefaultTaskLockTable) : DatabaseTaskLockManager &lt;JdbcTaskLock&gt;</p> <p>An implementation of DatabaseTaskLockManager using JDBC and Exposed as the lock store The manager will take care of generating the lock table using the SchemaUtils and the DefaultTaskLockTable. the schema utils should handle the case where the table already exists. TODO: test this Alternatively, you can use implement the ExposedTaskLockTable yourself and provide it instead</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/#constructors","title":"Constructors","text":"JdbcLockManager [jvm]constructor(name: TaskManagerConfiguration.TaskManagerName, application: Application, database: Database, taskLockTable: ExposedTaskLockTable = DefaultTaskLockTable)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/#properties","title":"Properties","text":"Name Summary application [jvm]open override val application: Application name [jvm]open override val name: TaskManagerConfiguration.TaskManagerName"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/#functions","title":"Functions","text":"Name Summary acquireLockKey [jvm]suspend override fun acquireLockKey(task: Task, executionTime: DateTime, concurrencyIndex: Int): JdbcTaskLock? attemptExecute [jvm]open suspend override fun attemptExecute(task: Task, executionTime: DateTime, concurrencyIndex: Int): JdbcTaskLock? close [jvm]open override fun close() init [jvm]suspend override fun init(tasks: List&lt;Task&gt;) initTaskLockTable [jvm]open suspend override fun initTaskLockTable() insertTaskLock [jvm]open suspend override fun insertTaskLock(task: Task, taskConcurrencyIndex: Int): Boolean markExecuted [jvm]open suspend override fun markExecuted(key: JdbcTaskLock) updateTaskLock [jvm]open suspend override fun updateTaskLock(task: Task, concurrencyIndex: Int, executionTime: DateTime): JdbcTaskLock?"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/-jdbc-lock-manager/","title":"JdbcLockManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcLockManager/JdbcLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/-jdbc-lock-manager/#jdbclockmanager","title":"JdbcLockManager","text":"<p>[jvm]\\ constructor( name: TaskManagerConfiguration.TaskManagerName, application: Application, database: Database, taskLockTable: ExposedTaskLockTable = DefaultTaskLockTable)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/application/","title":"application","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcLockManager/application</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/application/#application","title":"application","text":"<p>[jvm]\\ open override val application: Application</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/close/","title":"close","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcLockManager/close</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/close/#close","title":"close","text":"<p>[jvm]\\ open override fun close()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/init-task-lock-table/","title":"initTaskLockTable","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcLockManager/initTaskLockTable</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/init-task-lock-table/#inittasklocktable","title":"initTaskLockTable","text":"<p>[jvm]\\ open suspend override fun initTaskLockTable()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/insert-task-lock/","title":"insertTaskLock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcLockManager/insertTaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/insert-task-lock/#inserttasklock","title":"insertTaskLock","text":"<p>[jvm]\\ open suspend override fun insertTaskLock( task: Task, taskConcurrencyIndex: Int): Boolean</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/name/","title":"name","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcLockManager/name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/name/#name","title":"name","text":"<p>[jvm]\\ open override val name: TaskManagerConfiguration.TaskManagerName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/update-task-lock/","title":"updateTaskLock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcLockManager/updateTaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-lock-manager/update-task-lock/#updatetasklock","title":"updateTaskLock","text":"<p>[jvm]\\ open suspend override fun updateTaskLock( task: Task, concurrencyIndex: Int, executionTime: DateTime): JdbcTaskLock?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-task-lock/","title":"JdbcTaskLock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcTaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-task-lock/#jdbctasklock","title":"JdbcTaskLock","text":"<p>[jvm]\\ class JdbcTaskLock(val name: String, val concurrencyIndex: Int, val lockedAt: DateTime) : DatabaseTaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-task-lock/#constructors","title":"Constructors","text":"JdbcTaskLock [jvm]constructor(name: String, concurrencyIndex: Int, lockedAt: DateTime)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-task-lock/#properties","title":"Properties","text":"Name Summary concurrencyIndex [jvm]open override val concurrencyIndex: Int lockedAt [jvm]open override val lockedAt: DateTime name [jvm]open override val name: String"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-task-lock/#functions","title":"Functions","text":"Name Summary toString [jvm]open override fun toString(): String"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-task-lock/-jdbc-task-lock/","title":"JdbcTaskLock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcTaskLock/JdbcTaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-task-lock/-jdbc-task-lock/#jdbctasklock","title":"JdbcTaskLock","text":"<p>[jvm]\\ constructor(name: String, concurrencyIndex: Int, lockedAt: DateTime)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-task-lock/concurrency-index/","title":"concurrencyIndex","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcTaskLock/concurrencyIndex</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-task-lock/concurrency-index/#concurrencyindex","title":"concurrencyIndex","text":"<p>[jvm]\\ open override val concurrencyIndex: Int</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-task-lock/locked-at/","title":"lockedAt","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcTaskLock/lockedAt</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-task-lock/locked-at/#lockedat","title":"lockedAt","text":"<p>[jvm]\\ open override val lockedAt: DateTime</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-task-lock/name/","title":"name","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcTaskLock/name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-task-lock/name/#name","title":"name","text":"<p>[jvm]\\ open override val name: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-task-lock/to-string/","title":"toString","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/JdbcTaskLock/toString</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-jdbc-task-lock/to-string/#tostring","title":"toString","text":"<p>[jvm]\\ open override fun toString(): String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-job-lock-manager-configuration/","title":"MongoDBJobLockManagerConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDBJobLockManagerConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-job-lock-manager-configuration/#mongodbjoblockmanagerconfiguration","title":"MongoDBJobLockManagerConfiguration","text":"<p>[jvm]\\ class MongoDBJobLockManagerConfiguration : DatabaseTaskLockManagerConfiguration &lt;MongoDbTaskLock&gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-job-lock-manager-configuration/#constructors","title":"Constructors","text":"MongoDBJobLockManagerConfiguration [jvm]constructor()"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-job-lock-manager-configuration/#properties","title":"Properties","text":"Name Summary client [jvm]var client: MongoClient databaseName [jvm]var databaseName: String name [jvm]var name: String?"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-job-lock-manager-configuration/#functions","title":"Functions","text":"Name Summary createTaskManager [jvm]open override fun createTaskManager(application: Application): MongoDBLockManager"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-job-lock-manager-configuration/-mongo-d-b-job-lock-manager-configuration/","title":"MongoDBJobLockManagerConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDBJobLockManagerConfiguration/MongoDBJobLockManagerConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-job-lock-manager-configuration/-mongo-d-b-job-lock-manager-configuration/#mongodbjoblockmanagerconfiguration","title":"MongoDBJobLockManagerConfiguration","text":"<p>[jvm]\\ constructor()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-job-lock-manager-configuration/client/","title":"client","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDBJobLockManagerConfiguration/client</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-job-lock-manager-configuration/client/#client","title":"client","text":"<p>[jvm]\\ var client: MongoClient</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-job-lock-manager-configuration/create-task-manager/","title":"createTaskManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDBJobLockManagerConfiguration/createTaskManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-job-lock-manager-configuration/create-task-manager/#createtaskmanager","title":"createTaskManager","text":"<p>[jvm]\\ open override fun createTaskManager(application: Application): MongoDBLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-job-lock-manager-configuration/database-name/","title":"databaseName","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDBJobLockManagerConfiguration/databaseName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-job-lock-manager-configuration/database-name/#databasename","title":"databaseName","text":"<p>[jvm]\\ var databaseName: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/","title":"MongoDBLockManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDBLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/#mongodblockmanager","title":"MongoDBLockManager","text":"<p>[jvm]\\ class MongoDBLockManager(val name: TaskManagerConfiguration.TaskManagerName, val application: Application, client: MongoClient, databaseName: String) : DatabaseTaskLockManager &lt;MongoDbTaskLock&gt;</p> <p>An implementation of DatabaseTaskLockManager using MongoDB as the lock store</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/#constructors","title":"Constructors","text":"MongoDBLockManager [jvm]constructor(name: TaskManagerConfiguration.TaskManagerName, application: Application, client: MongoClient, databaseName: String)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/#properties","title":"Properties","text":"Name Summary application [jvm]open override val application: Application name [jvm]open override val name: TaskManagerConfiguration.TaskManagerName"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/#functions","title":"Functions","text":"Name Summary acquireLockKey [jvm]suspend override fun acquireLockKey(task: Task, executionTime: DateTime, concurrencyIndex: Int): MongoDbTaskLock? attemptExecute [jvm]open suspend override fun attemptExecute(task: Task, executionTime: DateTime, concurrencyIndex: Int): MongoDbTaskLock? close [jvm]open override fun close() init [jvm]suspend override fun init(tasks: List&lt;Task&gt;) initTaskLockTable [jvm]open suspend override fun initTaskLockTable() insertTaskLock [jvm]open suspend override fun insertTaskLock(task: Task, taskConcurrencyIndex: Int): Boolean markExecuted [jvm]open suspend override fun markExecuted(key: MongoDbTaskLock) updateTaskLock [jvm]open suspend override fun updateTaskLock(task: Task, concurrencyIndex: Int, executionTime: DateTime): MongoDbTaskLock?"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/-mongo-d-b-lock-manager/","title":"MongoDBLockManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDBLockManager/MongoDBLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/-mongo-d-b-lock-manager/#mongodblockmanager","title":"MongoDBLockManager","text":"<p>[jvm]\\ constructor( name: TaskManagerConfiguration.TaskManagerName, application: Application, client: MongoClient, databaseName: String)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/application/","title":"application","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDBLockManager/application</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/application/#application","title":"application","text":"<p>[jvm]\\ open override val application: Application</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/close/","title":"close","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDBLockManager/close</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/close/#close","title":"close","text":"<p>[jvm]\\ open override fun close()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/init-task-lock-table/","title":"initTaskLockTable","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDBLockManager/initTaskLockTable</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/init-task-lock-table/#inittasklocktable","title":"initTaskLockTable","text":"<p>[jvm]\\ open suspend override fun initTaskLockTable()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/insert-task-lock/","title":"insertTaskLock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDBLockManager/insertTaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/insert-task-lock/#inserttasklock","title":"insertTaskLock","text":"<p>[jvm]\\ open suspend override fun insertTaskLock( task: Task, taskConcurrencyIndex: Int): Boolean</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/name/","title":"name","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDBLockManager/name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/name/#name","title":"name","text":"<p>[jvm]\\ open override val name: TaskManagerConfiguration.TaskManagerName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/update-task-lock/","title":"updateTaskLock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDBLockManager/updateTaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-d-b-lock-manager/update-task-lock/#updatetasklock","title":"updateTaskLock","text":"<p>[jvm]\\ open suspend override fun updateTaskLock( task: Task, concurrencyIndex: Int, executionTime: DateTime): MongoDbTaskLock?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-db-task-lock/","title":"MongoDbTaskLock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDbTaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-db-task-lock/#mongodbtasklock","title":"MongoDbTaskLock","text":"<p>[jvm]\\ data class MongoDbTaskLock(val name: String, val concurrencyIndex: Int, var lockedAt: DateTime) : DatabaseTaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-db-task-lock/#constructors","title":"Constructors","text":"MongoDbTaskLock [jvm]constructor(name: String, concurrencyIndex: Int, lockedAt: DateTime)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-db-task-lock/#properties","title":"Properties","text":"Name Summary concurrencyIndex [jvm]open override val concurrencyIndex: Int lockedAt [jvm]open override var lockedAt: DateTime name [jvm]open override val name: String"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-db-task-lock/#functions","title":"Functions","text":"Name Summary toString [jvm]open override fun toString(): String"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-db-task-lock/-mongo-db-task-lock/","title":"MongoDbTaskLock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDbTaskLock/MongoDbTaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-db-task-lock/-mongo-db-task-lock/#mongodbtasklock","title":"MongoDbTaskLock","text":"<p>[jvm]\\ constructor(name: String, concurrencyIndex: Int, lockedAt: DateTime)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-db-task-lock/concurrency-index/","title":"concurrencyIndex","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDbTaskLock/concurrencyIndex</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-db-task-lock/concurrency-index/#concurrencyindex","title":"concurrencyIndex","text":"<p>[jvm]\\ open override val concurrencyIndex: Int</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-db-task-lock/locked-at/","title":"lockedAt","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDbTaskLock/lockedAt</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-db-task-lock/locked-at/#lockedat","title":"lockedAt","text":"<p>[jvm]\\ open override var lockedAt: DateTime</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-db-task-lock/name/","title":"name","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDbTaskLock/name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-db-task-lock/name/#name","title":"name","text":"<p>[jvm]\\ open override val name: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-db-task-lock/to-string/","title":"toString","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/MongoDbTaskLock/toString</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.database/-mongo-db-task-lock/to-string/#tostring","title":"toString","text":"<p>[jvm]\\ open override fun toString(): String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/","title":"io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/#types","title":"Types","text":"Name Summary RedisLockManager [common]class RedisLockManager(val name: TaskManagerConfiguration.TaskManagerName, val application: Application, connectionPool: RedisConnectionPool, lockExpirationMs: Long, connectionAcquisitionTimeoutMs: Long) : TaskLockManager&lt;RedisTaskLock&gt; An implementation of TaskLockManager using Redis as the lock store RedisTaskLock [common]@JvmInlinevalue class RedisTaskLock : TaskLockA TaskLock implementation for redis to use as a key RedisTaskLockManagerConfiguration [common]class RedisTaskLockManagerConfiguration(var host: String = \"undefined\", var port: Int = 0, var username: String? = null, var password: String? = null, var lockExpirationMs: Long = 100, var connectionPoolInitialSize: Int = 10, var connectionPoolMaxSize: Int = connectionPoolInitialSize, var connectionAcquisitionTimeoutMs: Long = 100) : TaskLockManagerConfiguration&lt;RedisTaskLock&gt;"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/#functions","title":"Functions","text":"Name Summary redis [common]fun TaskSchedulingConfiguration.redis(name: String? = null, config: RedisTaskLockManagerConfiguration.() -&gt; Unit)Add a RedisLockManager"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/redis/","title":"redis","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/redis</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/redis/#redis","title":"redis","text":"<p>[common]\\ fun TaskSchedulingConfiguration.redis( name: String? = null, config: RedisTaskLockManagerConfiguration.() -&gt; Unit)</p> <p>Add a RedisLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/","title":"RedisLockManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/#redislockmanager","title":"RedisLockManager","text":"<p>[common]\\ class RedisLockManager(val name: TaskManagerConfiguration.TaskManagerName, val application: Application, connectionPool: RedisConnectionPool, lockExpirationMs: Long, connectionAcquisitionTimeoutMs: Long) : TaskLockManager &lt;RedisTaskLock&gt;</p> <p>An implementation of TaskLockManager using Redis as the lock store</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/#constructors","title":"Constructors","text":"RedisLockManager [common]constructor(name: TaskManagerConfiguration.TaskManagerName, application: Application, connectionPool: RedisConnectionPool, lockExpirationMs: Long, connectionAcquisitionTimeoutMs: Long)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/#properties","title":"Properties","text":"Name Summary application [common]open override val application: Application name [common]open override val name: TaskManagerConfiguration.TaskManagerName"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/#functions","title":"Functions","text":"Name Summary acquireLockKey [common]open suspend override fun acquireLockKey(task: Task, executionTime: DateTime, concurrencyIndex: Int): RedisTaskLock? attemptExecute [common]open suspend override fun attemptExecute(task: Task, executionTime: DateTime, concurrencyIndex: Int): RedisTaskLock? close [common]open override fun close() init [common]open suspend override fun init(tasks: List&lt;Task&gt;) markExecuted [common]open suspend override fun markExecuted(key: RedisTaskLock)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/-redis-lock-manager/","title":"RedisLockManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisLockManager/RedisLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/-redis-lock-manager/#redislockmanager","title":"RedisLockManager","text":"<p>[common]\\ constructor( name: TaskManagerConfiguration.TaskManagerName, application: Application, connectionPool: RedisConnectionPool, lockExpirationMs: Long, connectionAcquisitionTimeoutMs: Long)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/acquire-lock-key/","title":"acquireLockKey","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisLockManager/acquireLockKey</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/acquire-lock-key/#acquirelockkey","title":"acquireLockKey","text":"<p>[common]\\ open suspend override fun acquireLockKey( task: Task, executionTime: DateTime, concurrencyIndex: Int): RedisTaskLock?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/application/","title":"application","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisLockManager/application</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/application/#application","title":"application","text":"<p>[common]\\ open override val application: Application</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/close/","title":"close","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisLockManager/close</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/close/#close","title":"close","text":"<p>[common]\\ open override fun close()</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/init/","title":"init","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisLockManager/init</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/init/#init","title":"init","text":"<p>[common]\\ open suspend override fun init( tasks: List &lt;Task&gt;)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/name/","title":"name","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisLockManager/name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-lock-manager/name/#name","title":"name","text":"<p>[common]\\ open override val name: TaskManagerConfiguration.TaskManagerName</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock/","title":"RedisTaskLock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock/#redistasklock","title":"RedisTaskLock","text":"<p>[common]\\ @JvmInline</p> <p>value class RedisTaskLock : TaskLock</p> <p>A TaskLock implementation for redis to use as a key</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock/#types","title":"Types","text":"Name Summary Companion [common]object Companion"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock/#properties","title":"Properties","text":"Name Summary concurrencyIndex [common]open override val concurrencyIndex: Int name [common]open override val name: String value [common]val value: Stringmust be unique to a task execution, i.e <code>$name_$concurrencyIndex at $executionTime</code>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock/concurrency-index/","title":"concurrencyIndex","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLock/concurrencyIndex</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock/concurrency-index/#concurrencyindex","title":"concurrencyIndex","text":"<p>[common]\\ open override val concurrencyIndex: Int</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock/name/","title":"name","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLock/name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock/name/#name","title":"name","text":"<p>[common]\\ open override val name: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock/value/","title":"value","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLock/value</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock/value/#value","title":"value","text":"<p>[common]\\ val value: String</p> <p>must be unique to a task execution, i.e <code>$name_$concurrencyIndex at $executionTime</code></p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock/-companion/","title":"Companion","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLock/Companion</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock/-companion/#companion","title":"Companion","text":"<p>[common]\\ object Companion</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock/-companion/#functions","title":"Functions","text":"Name Summary toRedisLockKey [common]fun Task.toRedisLockKey(executionTime: DateTime, concurrencyIndex: Int): RedisTaskLock"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock/-companion/to-redis-lock-key/","title":"toRedisLockKey","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLock/Companion/toRedisLockKey</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock/-companion/to-redis-lock-key/#toredislockkey","title":"toRedisLockKey","text":"<p>[common]\\ fun Task.toRedisLockKey( executionTime: DateTime, concurrencyIndex: Int): RedisTaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/","title":"RedisTaskLockManagerConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLockManagerConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/#redistasklockmanagerconfiguration","title":"RedisTaskLockManagerConfiguration","text":"<p>[common]\\ class RedisTaskLockManagerConfiguration(var host: String = \"undefined\", var port: Int = 0, var username: String? = null, var password: String? = null, var lockExpirationMs: Long = 100, var connectionPoolInitialSize: Int = 10, var connectionPoolMaxSize: Int = connectionPoolInitialSize, var connectionAcquisitionTimeoutMs: Long = 100) : TaskLockManagerConfiguration &lt;RedisTaskLock&gt;</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/#constructors","title":"Constructors","text":"RedisTaskLockManagerConfiguration [common]constructor(host: String = \"undefined\", port: Int = 0, username: String? = null, password: String? = null, lockExpirationMs: Long = 100, connectionPoolInitialSize: Int = 10, connectionPoolMaxSize: Int = connectionPoolInitialSize, connectionAcquisitionTimeoutMs: Long = 100)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/#properties","title":"Properties","text":"Name Summary connectionAcquisitionTimeoutMs [common]var connectionAcquisitionTimeoutMs: LongThe timeout for trying to get a connection to from the pool connectionPoolInitialSize [common]var connectionPoolInitialSize: IntHow many connections should the pool have initially connectionPoolMaxSize [common]var connectionPoolMaxSize: IntThe maximum number of connections in the pool host [common]var host: StringThe redis host lockExpirationMs [common]var lockExpirationMs: LongFor how long the lock should be valid, effectively, the pxMilliseconds for the setNx command name [common]var name: String? password [common]var password: String?The redis password port [common]var port: IntThe redis port username [common]var username: String?The redis username"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/#functions","title":"Functions","text":"Name Summary createTaskManager [common]open override fun createTaskManager(application: Application): RedisLockManager"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/-redis-task-lock-manager-configuration/","title":"RedisTaskLockManagerConfiguration","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLockManagerConfiguration/RedisTaskLockManagerConfiguration</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/-redis-task-lock-manager-configuration/#redistasklockmanagerconfiguration","title":"RedisTaskLockManagerConfiguration","text":"<p>[common]\\ constructor(host: String = \"undefined\", port: Int = 0, username: String? = null, password: String? = null, lockExpirationMs: Long = 100, connectionPoolInitialSize: Int = 10, connectionPoolMaxSize: Int = connectionPoolInitialSize, connectionAcquisitionTimeoutMs: Long = 100)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/connection-acquisition-timeout-ms/","title":"connectionAcquisitionTimeoutMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLockManagerConfiguration/connectionAcquisitionTimeoutMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/connection-acquisition-timeout-ms/#connectionacquisitiontimeoutms","title":"connectionAcquisitionTimeoutMs","text":"<p>[common]\\ var connectionAcquisitionTimeoutMs: Long</p> <p>The timeout for trying to get a connection to from the pool</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/connection-pool-initial-size/","title":"connectionPoolInitialSize","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLockManagerConfiguration/connectionPoolInitialSize</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/connection-pool-initial-size/#connectionpoolinitialsize","title":"connectionPoolInitialSize","text":"<p>[common]\\ var connectionPoolInitialSize: Int</p> <p>How many connections should the pool have initially</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/connection-pool-max-size/","title":"connectionPoolMaxSize","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLockManagerConfiguration/connectionPoolMaxSize</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/connection-pool-max-size/#connectionpoolmaxsize","title":"connectionPoolMaxSize","text":"<p>[common]\\ var connectionPoolMaxSize: Int</p> <p>The maximum number of connections in the pool</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/create-task-manager/","title":"createTaskManager","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLockManagerConfiguration/createTaskManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/create-task-manager/#createtaskmanager","title":"createTaskManager","text":"<p>[common]\\ open override fun createTaskManager(application: Application): RedisLockManager</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/host/","title":"host","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLockManagerConfiguration/host</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/host/#host","title":"host","text":"<p>[common]\\ var host: String</p> <p>The redis host</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/lock-expiration-ms/","title":"lockExpirationMs","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLockManagerConfiguration/lockExpirationMs</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/lock-expiration-ms/#lockexpirationms","title":"lockExpirationMs","text":"<p>[common]\\ var lockExpirationMs: Long</p> <p>For how long the lock should be valid, effectively, the pxMilliseconds for the setNx command</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/password/","title":"password","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLockManagerConfiguration/password</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/password/#password","title":"password","text":"<p>[common]\\ var password: String?</p> <p>The redis password</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/port/","title":"port","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLockManagerConfiguration/port</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/port/#port","title":"port","text":"<p>[common]\\ var port: Int</p> <p>The redis port</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/username/","title":"username","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/RedisTaskLockManagerConfiguration/username</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.managers.lock.redis/-redis-task-lock-manager-configuration/username/#username","title":"username","text":"<p>[common]\\ var username: String?</p> <p>The redis username</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/","title":"io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/#types","title":"Types","text":"Name Summary Task [common]data class Task(val name: String, val dispatcher: CoroutineDispatcher?, val concurrency: Int, val kronSchedule: KronScheduler, val task: suspend Application.(DateTime) -&gt; Unit) TaskLock [common]interface TaskLock : TaskExecutionTokenvalue must be unique to a task execution, i.e name + executionTime"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/","title":"Task","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/Task</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/#task","title":"Task","text":"<p>[common]\\ data class Task(val name: String, val dispatcher: CoroutineDispatcher?, val concurrency: Int, val kronSchedule: KronScheduler, val task: suspend Application.(DateTime) -&gt; Unit)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/#constructors","title":"Constructors","text":"Task [common]constructor(name: String, dispatcher: CoroutineDispatcher?, concurrency: Int, kronSchedule: KronScheduler, task: suspend Application.(DateTime) -&gt; Unit)"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/#properties","title":"Properties","text":"Name Summary concurrency [common]val concurrency: Int dispatcher [common]val dispatcher: CoroutineDispatcher? kronSchedule [common]val kronSchedule: KronScheduler name [common]val name: String task [common]val task: suspend Application.(DateTime) -&gt; Unit"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/#functions","title":"Functions","text":"Name Summary concurrencyRange [common]fun concurrencyRange(): IntRange toRedisLockKey [common]fun Task.toRedisLockKey(executionTime: DateTime, concurrencyIndex: Int): RedisTaskLock"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/-task/","title":"Task","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/Task/Task</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/-task/#task","title":"Task","text":"<p>[common]\\ constructor(name: String, dispatcher: CoroutineDispatcher?, concurrency: Int, kronSchedule: KronScheduler, task: suspend Application.(DateTime) -&gt; Unit)</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/concurrency-range/","title":"concurrencyRange","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/Task/concurrencyRange</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/concurrency-range/#concurrencyrange","title":"concurrencyRange","text":"<p>[common]\\ fun concurrencyRange(): IntRange</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/concurrency/","title":"concurrency","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/Task/concurrency</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/concurrency/#concurrency","title":"concurrency","text":"<p>[common]\\ val concurrency: Int</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/dispatcher/","title":"dispatcher","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/Task/dispatcher</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/dispatcher/#dispatcher","title":"dispatcher","text":"<p>[common]\\ val dispatcher: CoroutineDispatcher?</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/kron-schedule/","title":"kronSchedule","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/Task/kronSchedule</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/kron-schedule/#kronschedule","title":"kronSchedule","text":"<p>[common]\\ val kronSchedule: KronScheduler</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/name/","title":"name","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/Task/name</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/name/#name","title":"name","text":"<p>[common]\\ val name: String</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/task/","title":"task","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/Task/task</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task/task/#task","title":"task","text":"<p>[common]\\ val task: suspend Application.(DateTime) -&gt; Unit</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task-lock/","title":"TaskLock","text":"<p>//extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/TaskLock</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task-lock/#tasklock","title":"TaskLock","text":"<p>interface TaskLock : TaskExecutionToken</p> <p>value must be unique to a task execution, i.e name + executionTime</p>"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task-lock/#inheritors","title":"Inheritors","text":"DatabaseTaskLock RedisTaskLock"},{"location":"dokka/extra-ktor-plugins/io.github.flaxoos.ktor.server.plugins.taskscheduling.tasks/-task-lock/#properties","title":"Properties","text":"Name Summary concurrencyIndex [common]abstract val concurrencyIndex: Int name [common]abstract val name: String"},{"location":"guide/installation/","title":"Installation","text":"<p>The libraries are published to maven central, see above for the latest version</p> <pre><code>dependencies {\n    implementation(\"io.github.flaxoos:ktor-server-kafka:$ktor_plugins_version\")\n    implementation(\"io.github.flaxoos:ktor-server-task-scheduling-$module:$ktor_plugins_version\")\n    implementation(\"io.github.flaxoos:ktor-server-rate-limiting:$ktor_plugins_version\")\n    implementation(\"io.github.flaxoos:ktor-client-circuit-breaker:$ktor_plugins_version\")\n}\n</code></pre>"},{"location":"ktor-client-circuit-breaker/","title":"Circuit Breaker Plugin for Ktor Client","text":"<p>The Circuit Breaker pattern is a crucial part of modern software architecture, allowing you to gracefully handle potential failures when communicating with external services. The Ktor Circuit Breaker plugin is an implementation of this pattern, providing you with an easy way to incorporate this mechanism into your Ktor clients.</p>"},{"location":"ktor-client-circuit-breaker/#features","title":"Features:","text":"<ul> <li> <p>Flexible Configuration: Define both global and specific circuit breaker configurations.</p> </li> <li> <p>Support for Named Circuit Breakers: Allows for specific configurations for different endpoints or services.</p> </li> <li> <p>Tight Integration with Ktor Client: Uses familiar Ktor constructs.</p> </li> </ul>"},{"location":"ktor-client-circuit-breaker/#how-to-use","title":"How to Use:","text":"<p>You can configure the Circuit Breaker plugin during the installation phase of the HttpClient. Both global and named configurations can be set.</p> <p>Global, if registered, will be the default choice, whereas registering with a specific name allows you to apply it to specific services</p> <pre><code>HttpClient {\n   install(CircuitBreaking) {\n      config.global {\n         failureThreshold = 10\n         halfOpenFailureThreshold = 5\n         resetInterval = 100.milliseconds\n      }\n\n      config.register(\"strict\".toCircuitBreakerName()) {\n         failureThreshold = 2\n         halfOpenFailureThreshold = 1\n         resetInterval = 1.seconds\n      }\n   }\n}\n</code></pre> <p>You can then make requests using the circuit breaker, either by calling <code>HttpClient.requestWithCircuitBreaker</code></p> <pre><code>client.requestWithCircuitBreaker {\n   method = Get\n   url(\"https://service.com\")\n}\n\nclient.requestWithCircuitBreaker(name = \"strict\".toCircuitBreakerName()) {\n    method = Get\n    url(\"https://unreliable-service.com\")\n}\n</code></pre> <p>Or <code>HttpRequestBuilder.withCircuitBreaker</code></p> <pre><code>client.get(\"https://service.com\") {\n   withCircuitBreaker()\n}\n\nclient.get(\"https://unreliable-service.com\") {\n   withCircuitBreaker(name = \"strict\".toCircuitBreakerName())\n}\n</code></pre>"},{"location":"ktor-client-circuit-breaker/#configuration-options","title":"Configuration Options:","text":"<p>The following are the configurable parameters:</p> <ul> <li> <p><code>failureThreshold</code>: The number of failures allowed before moving the circuit to the <code>HALF_OPEN</code> state for the global   configuration.</p> </li> <li> <p><code>halfOpenFailureThreshold</code>: The number of failures allowed in the <code>HALF_OPEN</code> state for the global configuration.</p> </li> <li> <p><code>resetInterval</code>: The time to wait before transitioning from <code>OPEN</code> to <code>HALF_OPEN</code> state for the global configuration.</p> </li> <li> <p><code>failureTrigger</code>: What is considered a failure. default is [HttpResponse.status] &gt;= 300</p> </li> </ul>"},{"location":"ktor-client-circuit-breaker/#important-notes","title":"Important Notes:","text":"<ul> <li> <p>Ensure you have distinct names for each circuit breaker to prevent conflicts.</p> </li> <li> <p>Tweak the configuration based on the reliability and response times of the services you're interfacing with.</p> </li> <li> <p>Continuously monitor and adjust configurations for optimum resilience and performance.</p> </li> </ul>"},{"location":"ktor-server-kafka/","title":"Kafka Plugin for Ktor Server","text":"<p>Integrate Kafka effortlessly into your Ktor application with this powerful Kafka Plugin. This plugin provides an easy setup for Kafka clients, allowing you to configure and manage Kafka Admin, Producer, and Consumer instances directly in your Ktor server.</p>"},{"location":"ktor-server-kafka/#features","title":"Features","text":"<ul> <li>Streamlined Configuration: Install Kafka client configurations either through application configuration files or   directly in code.</li> <li>Admin Client: Easy setup and topic creation for your Kafka admin client.</li> <li>Producer Client: Initialize Kafka producer instances effortlessly.</li> <li>Consumer Client: Configure and manage Kafka consumer instances, including polling logic and record handling.</li> <li>Built in Avro4k support: Avro schemas are supported by default. There's no need to define key/value serializers.   Schemas can be registered automatically. Avro records to and from conversion methods</li> </ul>"},{"location":"ktor-server-kafka/#how-to-use","title":"How to Use","text":""},{"location":"ktor-server-kafka/#from-code","title":"From Code","text":"<p>The plugin provides a DSL that enables comprehensive Kafka configuration, adhering to the classes and properties defined in org.apache.kafka.common.config, the DSL offers a fluent, programmatic way to set up your Kafka settings right within your Ktor application.</p> <pre><code>install(Kafka) {\n    schemaRegistryUrl = listOf(\"my.schemaRegistryUrl\")\n    topic(named(\"my-topic\")) {\n        partitions = 1\n        replicas = 1\n        configs {\n            messageTimestampType = CreateTime\n        }\n    }\n    common { // &lt;-- Define common configs\n        bootstrapServers = listOf(\"my-kafka\")\n        retries = 1\n        clientId = \"my-client-id\"\n    }\n    admin { } // &lt;-- Creates an admin client\n    producer { // &lt;-- Creates a producer\n        clientId = \"my-client-id\"\n    }\n    consumer { // &lt;-- Creates a consumer\n        groupId = \"my-group-id\"\n        clientId = \"my-client-id-override\" //&lt;-- Override common configurations\n    }\n    consumerConfig {\n        consumerRecordHandler(named(\"my-topic\")) { record -&gt;\n            myService.save(record)\n        }\n    }\n    registerSchemas {\n        using { // &lt;-- optionally provide a client, by default CIO is used\n            HttpClient()\n        }\n        MyRecord::class at named(\"my-topic\") // &lt;-- Will register schema upon startup\n    }\n}\n</code></pre>"},{"location":"ktor-server-kafka/#from-configuration-file","title":"From Configuration File","text":"<p>Alternatively, You can easily install the Kafka plugin using an application configuration file:</p> <pre><code>install(KafkaFromFileConfig.Kafka) {\n    consumerConfig {\n        consumerRecordHandler(\"my-topic\") { record -&gt;\n            myService.save(record)\n        }\n    }\n    registerSchemas {\n        MyRecord::class at named(\"my-topic\") // &lt;-- Will register schema upon startup\n    }\n}\n</code></pre> <p>The above will look for the config in <code>ktor.kafka</code> by default.</p> <p>You can also specify a different path if needed:</p> <pre><code>install(KafkaFromFileConfig.Kafka(\"ktor.my.kafka\")) {\n    ...\n}\n</code></pre> <p>Example file configuration:</p> <pre><code>ktor {\n  kafka {\n    schema.registry.url = [\"SCHEMA_REGISTRY_URL\"]\n    common {\n      \"bootstrap.servers\" = [\"BOOTSTRAP_SERVERS\"]\n      # Additional configuration\n    }\n    admin {\n      ##Additional configuration\n    }\n    consumer {\n      \"group.id\" = \"my-group-id\"\n      # Additional configuration\n    }\n    producer {\n      \"client.id\" = \"my-client-id\"\n      # Additional configuration\n    }\n    topics = [\n      {\n        name = my-topic\n        partitions = 1\n        replicas = 1\n        configs {\n          \"message.timestamp.type\" = CreateTime\n          # Additional configuration\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"ktor-server-kafka/#access-kafka-clients","title":"Access Kafka Clients","text":"<p>After installation, you can easily access the initialized Kafka clients throughout your Ktor application:</p> <pre><code>val adminClient = application.kafkaAdminClient\nval producer = application.kafkaProducer\nval consumer = application.kafkaConsumer\n</code></pre>"},{"location":"ktor-server-kafka/#important-notes","title":"Important Notes","text":"<ul> <li> <p>Make sure you define a consumer configuration when you initialize a consumer client, or the consumer job will not   start automatically.</p> </li> <li> <p>Ensure that the <code>pollFrequency</code> for consumers is set appropriately, depending on your use-case.</p> </li> <li> <p>Always verify topic creation and monitor client status for optimal Kafka integration.</p> </li> <li> <p>This plugin works asynchronously, so it's advised to monitor the logs for setup completion and error notifications.</p> </li> </ul>"},{"location":"ktor-server-kafka/#acknowledgements","title":"Acknowledgements","text":"<p>This project uses code from gAmUssA/ktor-kafka, which is available under the MIT License. This project expands on concepts that were introduced there in a few ways:</p> <ul> <li>The Topic DSL idea was expanded to allow for configuration of all components in a similar manner</li> <li>The consumer behaviour can be configured in the plugin setup</li> <li>The producer and consumer are created automatically and exposed via the server attributes</li> <li>The consumer can return a flow of records</li> </ul>"},{"location":"ktor-server-rate-limiting/","title":"Rate Limiting Plugin for Ktor Server","text":"<p>Manage request rate limiting as you see fit with <code>RateLimiting</code> in your Ktor server, ensuring you protect your application from potential abuse or resource overload.</p>"},{"location":"ktor-server-rate-limiting/#features","title":"Features","text":""},{"location":"ktor-server-rate-limiting/#strategies","title":"Strategies","text":"<ul> <li>Token Bucket: Supports variable request rate and is suitable for handling bursts of requests.</li> <li>Leaky Bucket: Guarantees a constant request rate, providing fair distribution between clients</li> <li>Sliding Window: Allows a specific weight of calls to be made over a designated duration, considering the rate and   call weight configured.</li> </ul>"},{"location":"ktor-server-rate-limiting/#configurability","title":"Configurability","text":"<ul> <li>Configurable capacity unit of measure: Measure call count or call weight in bytes</li> <li>Configurable call weighting: Calls can be made to take up more capacity based on a given function</li> <li>Whitelist &amp; Blacklist: Whitelist or blacklist based on the client's host, user-agent, or principal.</li> <li>Customizable Response: Set your custom response when the rate limit is exceeded. The default response status is   <code>429 Too Many Requests</code>.</li> <li>Logging: Log rate limit hits for better monitoring and debugging.</li> </ul>"},{"location":"ktor-server-rate-limiting/#how-to-use","title":"How to Use","text":"<p>To apply the <code>RateLimitingPlugin</code>, you need to <code>install</code> it in your Ktor route and configure as per your requirements:</p> <pre><code>routing {\n  route(\"limited-route\") {\n    install(RateLimiting) {\n      rateLimiter {\n        type = TokenBucket::class\n        rate = 1.seconds\n        capacity = 100\n      }\n      whiteListedHosts = setOf(\"trusted-host.com\")\n      blackListedAgents = setOf(\"malicious-agent\")\n      rateLimitExceededHandler = { rateLimiterResponse -&gt;\n        ...\n        respond(HttpStatusCode.TooManyRequests, rateLimiterResponse.message)\n      }\n    }\n\n    get {\n      call.respondText(\"Welcome to our limited route!\")\n    }\n  }\n}\n\n</code></pre>"},{"location":"ktor-server-rate-limiting/#configuration-options","title":"Configuration Options","text":"<pre><code>  install(RateLimiting) {\n    // Configuring Rate Limiter\n    type = TokenBucket::class, // Using Token Bucket rate limiting strategy\n    rate = 10.milliseconds,          // 1 token is added per 10 milliseconds\n    capacity = 1000,           // Up to 1000 tokens can be held for bursty traffic\n    clock = { Clock.System.now().toEpochMilliseconds() },  // Using system time\n    callVolumeUnit = CallVolumeUnit.Calls()   // Measuring by the number of API calls\n    )\n\n    // Whitelisting Configurations\n    whiteListedHosts = setOf(\"192.168.1.1\") // IP address exempted from rate limiting\n    whiteListedPrincipals = setOf(Principal(\"trustedUser\")) // Trusted user with unrestricted access\n    whiteListedAgents = setOf(\"trusted-agent\") // A user-agent that is allowed unrestricted access\n\n    // Blacklisting Configurations\n    blackListedHosts = setOf(\"192.168.1.2\") // IP address completely restricted from API access\n    blackListedPrincipals = setOf(Principal(\"maliciousUser\")) // User that is denied access to the API\n    blackListedAgents = setOf(\"malicious-agent\") // A user-agent that is blocked from making API calls\n\n    // Handlers\n    blackListedCallerCallHandler = { call -&gt;\n        // Respond with a 403 Forbidden status to blacklisted callers\n        call.respond(HttpStatusCode.Forbidden, \"You are blacklisted and cannot access the API.\")\n    }\n\n    callAcceptedHandler = { notLimited -&gt;\n        // Add rate-limiting headers for accepted calls\n        response.headers.append(\"X-RateLimit-Remaining\", \"${notLimited.remaining}\")\n        response.headers.append(\"X-RateLimit-Measured-by\", notLimited.rateLimiter.callVolumeUnit.name)\n    }\n\n    rateLimitExceededHandler = { limitedBy -&gt;\n        // Respond with a 429 status and appropriate headers for rate-limited callers\n        response.headers.append(\"X-RateLimit-Limit\", \"${limitedBy.rateLimiter.capacity}\")\n        response.headers.append(\"X-RateLimit-Measured-by\", limitedBy.rateLimiter.callVolumeUnit.name)\n        response.headers.append(\"X-RateLimit-Reset\", \"${limitedBy.resetIn.inWholeMilliseconds}\")\n        respond(HttpStatusCode.TooManyRequests, \"Rate limit exceeded: ${limitedBy.message}\")\n    }\n\n</code></pre>"},{"location":"ktor-server-task-scheduling/","title":"Task Scheduler Plugin for Ktor Server","text":"<p>Manage scheduled tasks across instances of your distributed ktor server, using various strategies and a kotlin favoured cron tab</p>"},{"location":"ktor-server-task-scheduling/#features","title":"Features","text":"<ul> <li>Various Implementations: Can   use Redis(   JVM/Native), JDBC (   JVM)   or MongoDB (   JVM) for lock management, or add your own implementation   by   extending Core</li> <li> <p>Multiple managers: Define multiple tasks and assign each to a manager of your choice</p> </li> <li> <p>Kron Schedule builder: Utilizes krontab for building schedules   using a convenient kotlin DSL</p> </li> </ul>"},{"location":"ktor-server-task-scheduling/#how-to-use","title":"How to Use","text":"<ul> <li>Add a dependency for your chosen task managers or for core and implement yourself:</li> </ul> <pre><code>    implementation(\"io.github.flaxoos:ktor-server-task-scheduling-${redis/jdbc/mongodb/core}:$ktor_plugins_version\")\n</code></pre> <ul> <li>Or add</li> <li>Install the plugin and define one or more task managers:</li> </ul> <pre><code>install(TaskScheduling){\n    redis{ //&lt;-- this will be the default manager\n        ...\n    }\n    jdbc(\"my jdbc manager\"){\n        ...\n    }\n}\n</code></pre> <ul> <li>Configure some tasks and assign them to the managers</li> </ul> <pre><code>install(TaskScheduling) {\n    ...\n    task { // if no taskManagerName is provided, the task would be assigned to the default manager\n        name = \"My task\"\n        task = { taskExecutionTime -&gt;\n            log.info(\"My task is running: $taskExecutionTime\")\n        }\n        kronSchedule = {\n            hours {\n                from 0 every 12\n            }\n            minutes {\n                from 15 every 30\n            }\n        }\n        concurrency = 2\n    }\n\n    task(taskManagerName = \"my jdbc manager\") {\n        name = \"My Jdbc task\"\n        ...\n    }\n}\n</code></pre>"},{"location":"ktor-server-task-scheduling/#important-notes","title":"Important Notes","text":"<ul> <li>Ensure you have distinct names for task and task manager.</li> </ul>"}]}