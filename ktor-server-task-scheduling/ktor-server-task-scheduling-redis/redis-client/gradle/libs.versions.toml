[versions]
# Core technologies
kotlin = "1.9.10"
java = "11"
gradle = "8.2.1"
shadow = "8.1.1"
kotlinx-serialization = "1.6.0"
kotlinx-io = "0.3.0"
ksp = "1.9.10-1.0.13"

# Web Framework
ktor = "2.3.2"

# Android
android = "8.1.0"

# Database
h2 = "2.2.224"
postgres = "42.6.0"
exposed = "0.44.0"
mongodb = "4.11.0"

# Logging
logback = "1.4.11"
kotlin-logging = "5.1.0"
logging_capabilities = "0.11.1"

# Asynchronous and Concurrency
atomicFu = "0.21.0"
kotlinx-coroutines = "1.7.1"

# Testing
kotest = "5.6.2"
kotest-test-containers = "2.0.2"
mockk = "1.11.0"
mockative = "2.0.1"
kmock = "0.3.0-rc08"
testcontainers = "1.19.0"
redis-testcontainers = "1.6.4"

# Code Quality and Coverage
ktlint = "11.6.1"
kover = "0.7.2"
koverBadge = "0.0.6"
detekt = "1.23.1"

# Date and Time
kotlinx-datetime = "0.4.0"

# Functional Programming
arrow = "1.2.0"

# Messaging
kafka = "3.5.1"
confluent = "5.3.0"
avro4k = "0.41.0"
avro = "1.11.2"

# Redis
kreds = "0.9.0"

# Documentation
dokka = "1.9.10"

# Github
gradle-release = "3.0.2"

# Nexus
nexusPublish = "2.0.0-rc-1"

# Miscellaneous
krontab = "2.2.1"
uuid = "0.8.1"

[libraries]
# Core libraries
kotlin-gradlePlugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
arrow-core = { module = "io.arrow-kt:arrow-core", version.ref = "arrow" }
arrow-fx-coroutines = { module = "io.arrow-kt:arrow-fx-coroutines", version.ref = "arrow" }
shadow-gradlePlugin = { module = "com.github.johnrengelman:shadow", version.ref = "shadow" }
kotlinx-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlinx-serialization" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }
kotlinx-io-core = { module = "org.jetbrains.kotlinx:kotlinx-io-core", version.ref = "kotlinx-io" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }

# Web Framework
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-cio = { module = "io.ktor:ktor-server-cio", version.ref = "ktor" }
ktor-server-core-jvm = { module = "io.ktor:ktor-server-core-jvm", version.ref = "ktor" }
ktor-server-cio-jvm = { module = "io.ktor:ktor-server-cio-jvm", version.ref = "ktor" }
ktor-server-config-yaml = { module = "io.ktor:ktor-server-config-yaml", version.ref = "ktor" }
ktor-server-auth = { module = "io.ktor:ktor-server-auth", version.ref = "ktor" }
ktor-server-status-pages = { module = "io.ktor:ktor-server-status-pages", version.ref = "ktor" }
ktor-server-call-id = { module = "io.ktor:ktor-server-call-id", version.ref = "ktor" }
ktor-server-call-logging-jvm = { module = "io.ktor:ktor-server-call-logging-jvm", version.ref = "ktor" }
ktor-server-double-receive = { module = "io.ktor:ktor-server-double-receive", version.ref = "ktor" }
ktor-server-host-common = { module = "io.ktor:ktor-server-host-common", version.ref = "ktor" }
ktor-server-contentNegotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-server-test-host = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }

ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor" }
ktor-client-contentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }

ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }

# Database
h2 = { module = "com.h2database:h2", version.ref = "h2" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgres" }
exposed-core = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposed" }
exposed-dao = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "exposed" }
exposed-jdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposed" }
exposed-json = { module = "org.jetbrains.exposed:exposed-json", version.ref = "exposed" }
exposed-kotlin-datetime = { module = "org.jetbrains.exposed:exposed-kotlin-datetime", version.ref = "exposed" }
mongodb-driver-kotlin-coroutine = { module = "org.mongodb:mongodb-driver-kotlin-coroutine", version.ref = "mongodb" }
mongodb-bson-kotlinx = { module = "org.mongodb:bson-kotlinx", version.ref = "mongodb" }

# Testing libraries
kotest-runner-junit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotest-property = { module = "io.kotest:kotest-property", version.ref = "kotest" }
kotest-framework-datatest = { module = "io.kotest:kotest-framework-datatest", version.ref = "kotest" }
kotest-assertions-core = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-framework-engine = { module = "io.kotest:kotest-framework-engine", version.ref = "kotest" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
mockk-agent-jvm = { module = "io.mockk:mockk-agent-jvm", version.ref = "mockk" }
mockative = { module = "io.mockative:mockative", version.ref = "mockative" }
mockative-processor = { module = "io.mockative:mockative-processor", version.ref = "mockative" }
kotest-extensions-testcontainers = { module = "io.kotest.extensions:kotest-extensions-testcontainers", version.ref = "kotest-test-containers" }
kotest-extensions-testcontainers-kafka = { module = "io.kotest.extensions:kotest-extensions-testcontainers-kafka", version.ref = "kotest-test-containers" }
testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-bom = { module = "org.testcontainers:testcontainers-bom", version.ref = "testcontainers" }
testcontainers-kafka = { module = "org.testcontainers:kafka", version.ref = "testcontainers" }
testcontainers-redis = { module = "com.redis.testcontainers:testcontainers-redis", version.ref = "redis-testcontainers" }
testcontainers-mongodb = { module = "org.testcontainers:mongodb", version.ref = "testcontainers" }
testcontainers-postgres = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }

# Messaging Libraries
kafka-clients = { module = "org.apache.kafka:kafka-clients", version.ref = "kafka" }
kafka-streams = { module = "org.apache.kafka:kafka-streams", version.ref = "kafka" }
kafka-schema-registry-client = { module = "io.confluent:kafka-schema-registry-client", version.ref = "confluent" }
kafka-avro-serializer = { module = "io.confluent:kafka-avro-serializer", version.ref = "confluent" }
avro4k-core = { module = "com.sksamuel.avro4k:avro4k-core", version.ref = "avro4k" }
avro-tools = { module = "org.apache.avro:avro-tools", version.ref = "avro" }

# Code Quality and Coverage plugins
ktlint-gradlePlugin = { module = "org.jlleitschuh.gradle:ktlint-gradle", version.ref = "ktlint" }
kover-gradlePlugin = { module = "org.jetbrains.kotlinx:kover-gradle-plugin", version.ref = "kover" }
kover-badge-gradlePlugin = { module = "io.github.flaxoos:kover-badge", version.ref = "koverBadge" }
detekt-gradlePlugin = { module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt" }

# Asynchronous and Concurrency plugins
atomicfu-gradlePlugin = { module = "org.jetbrains.kotlinx:atomicfu-gradle-plugin", version.ref = "atomicFu" }

# Logging
logback-core = { module = "ch.qos.logback:logback-core", version.ref = "logback" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
kotlin-logging = { module = "io.github.oshai:kotlin-logging", version.ref = "kotlin-logging" }
loggingCapabilities-gradlePlugin = { module = "dev.jacomet.gradle.plugins:logging-capabilities", version.ref = "logging_capabilities" }

# Testing plugins
kotestFrameworkMultiplatform-gradlePlugin = { module = "io.kotest:kotest-framework-multiplatform-plugin-gradle", version.ref = "kotest" }

# Documentation
dokka-gradlePlugin = { module = "org.jetbrains.dokka:dokka-gradle-plugin", version.ref = "dokka" }

# Ksp
ksp-gradlePlugin = { module = "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin", version.ref = "ksp" }
ksp-symbolProcessing-api = { module = "com.google.devtools.ksp:symbol-processing-api", version.ref = "ksp" }

# Kmock
kmock = { module = "tech.antibytes.kmock:kmock", version.ref = "kmock" }
kmock-gradlePlugin = { module = "tech.antibytes.kmock:kmock-gradle", version.ref = "kmock" }

# Android
android-gradlePlugin = { module = "com.android.tools.build:gradle", version.ref = "android" }

# Github
gradle-release-gradlePlugin = { module = "net.researchgate:gradle-release", version.ref = "gradle-release" }

# Miscellaneous
krontab = { module = "dev.inmo:krontab", version.ref = "krontab" }
uuid = { module = "com.benasher44:uuid", version.ref = "uuid" }
kreds = { module = "io.github.crackthecodeabhi:kreds", version.ref = "kreds" }
#
#[bundles]
#common-core = ["kotlinx-coroutines-core","kotlinx-coroutines-core" ]
#common-testing-core = [
#    "kotlinx-coroutines-test",
#    "kotest-framework-engine",
#    "kotest-framework-datatest",
#    "kotest-assertions-core"
#]
#jvm-testing-core = [
#    "kotest-runner-junit5", "logback-classic"
#]
#common-server-core = [
#    "ktor-server-core",
#    "ktor-server-config-yaml",
#    "ktor-server-auth",
#]
#common-server-testing-core = [
#    "ktor-server-test-host",
#    "ktor-server-status-pages",
#]
#common-client-core = [
#    "ktor-client-core"
#]
#common-client-testing-core = [
#    "ktor-client-mock"
#]
#jvm-client-core = [
#    "ktor-client-cio"
#]
#jvm-client-testing-core = [
#    "logback-classic"
#]

[plugins]
# Build
shadow = { id = "com.github.johnrengelman.shadow", version.ref = "shadow" }

# Android
android-library = { id = "com.android.library", version.ref = "android" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }

# Code quality and coverage
kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kover" }
kover-badge = { id = "io.github.flaxoos.kover-badge", version.ref = "koverBadge" }
loggingCapabilities = { id = "dev.jacomet.logging-capabilities", version.ref = "logging_capabilities" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
ktlint = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "ktlint" }

# Documentation
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }

# Asynchronous and Concurrency plugins
atomicfu = { id = "kotlinx-atomicfu", version.ref = "atomicFu" }

# Testing
kotest = { id = "io.kotest.multiplatform", version.ref = "kotest" }

# Ksp
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }

# Kmock
kmock = { id = "tech.antibytes.kmock.kmock-gradle", version.ref = "kmock" }

# Github
gradle-release = { id = "net.researchgate.release", version.ref = "gradle-release" }

# Nexus
nexusPublish = { id = "io.github.gradle-nexus.publish-plugin", version.ref = "nexusPublish" }